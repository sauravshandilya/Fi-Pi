
Firebird-Rpi.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800200  00000d54  00000de8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000d54  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          0000004a  00800200  00800200  00000de8  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 00000120  00000000  00000000  00000e18  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000005ab  00000000  00000000  00000f38  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001b3  00000000  00000000  000014e3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000089b  00000000  00000000  00001696  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000049c  00000000  00000000  00001f34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000446  00000000  00000000  000023d0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000008f9  00000000  00000000  00002816  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  0000310f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	71 c0       	rjmp	.+226    	; 0xe4 <__ctors_end>
   2:	00 00       	nop
   4:	81 c0       	rjmp	.+258    	; 0x108 <__bad_interrupt>
   6:	00 00       	nop
   8:	7f c0       	rjmp	.+254    	; 0x108 <__bad_interrupt>
   a:	00 00       	nop
   c:	7d c0       	rjmp	.+250    	; 0x108 <__bad_interrupt>
   e:	00 00       	nop
  10:	7b c0       	rjmp	.+246    	; 0x108 <__bad_interrupt>
  12:	00 00       	nop
  14:	f0 c1       	rjmp	.+992    	; 0x3f6 <__vector_5>
  16:	00 00       	nop
  18:	c1 c1       	rjmp	.+898    	; 0x39c <__vector_6>
  1a:	00 00       	nop
  1c:	75 c0       	rjmp	.+234    	; 0x108 <__bad_interrupt>
  1e:	00 00       	nop
  20:	73 c0       	rjmp	.+230    	; 0x108 <__bad_interrupt>
  22:	00 00       	nop
  24:	71 c0       	rjmp	.+226    	; 0x108 <__bad_interrupt>
  26:	00 00       	nop
  28:	6f c0       	rjmp	.+222    	; 0x108 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	6d c0       	rjmp	.+218    	; 0x108 <__bad_interrupt>
  2e:	00 00       	nop
  30:	6b c0       	rjmp	.+214    	; 0x108 <__bad_interrupt>
  32:	00 00       	nop
  34:	69 c0       	rjmp	.+210    	; 0x108 <__bad_interrupt>
  36:	00 00       	nop
  38:	67 c0       	rjmp	.+206    	; 0x108 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	65 c0       	rjmp	.+202    	; 0x108 <__bad_interrupt>
  3e:	00 00       	nop
  40:	63 c0       	rjmp	.+198    	; 0x108 <__bad_interrupt>
  42:	00 00       	nop
  44:	61 c0       	rjmp	.+194    	; 0x108 <__bad_interrupt>
  46:	00 00       	nop
  48:	5f c0       	rjmp	.+190    	; 0x108 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	5d c0       	rjmp	.+186    	; 0x108 <__bad_interrupt>
  4e:	00 00       	nop
  50:	5b c0       	rjmp	.+182    	; 0x108 <__bad_interrupt>
  52:	00 00       	nop
  54:	59 c0       	rjmp	.+178    	; 0x108 <__bad_interrupt>
  56:	00 00       	nop
  58:	57 c0       	rjmp	.+174    	; 0x108 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	55 c0       	rjmp	.+170    	; 0x108 <__bad_interrupt>
  5e:	00 00       	nop
  60:	53 c0       	rjmp	.+166    	; 0x108 <__bad_interrupt>
  62:	00 00       	nop
  64:	51 c0       	rjmp	.+162    	; 0x108 <__bad_interrupt>
  66:	00 00       	nop
  68:	4f c0       	rjmp	.+158    	; 0x108 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	4d c0       	rjmp	.+154    	; 0x108 <__bad_interrupt>
  6e:	00 00       	nop
  70:	4b c0       	rjmp	.+150    	; 0x108 <__bad_interrupt>
  72:	00 00       	nop
  74:	49 c0       	rjmp	.+146    	; 0x108 <__bad_interrupt>
  76:	00 00       	nop
  78:	47 c0       	rjmp	.+142    	; 0x108 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	45 c0       	rjmp	.+138    	; 0x108 <__bad_interrupt>
  7e:	00 00       	nop
  80:	43 c0       	rjmp	.+134    	; 0x108 <__bad_interrupt>
  82:	00 00       	nop
  84:	41 c0       	rjmp	.+130    	; 0x108 <__bad_interrupt>
  86:	00 00       	nop
  88:	3f c0       	rjmp	.+126    	; 0x108 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	3d c0       	rjmp	.+122    	; 0x108 <__bad_interrupt>
  8e:	00 00       	nop
  90:	3b c0       	rjmp	.+118    	; 0x108 <__bad_interrupt>
  92:	00 00       	nop
  94:	39 c0       	rjmp	.+114    	; 0x108 <__bad_interrupt>
  96:	00 00       	nop
  98:	37 c0       	rjmp	.+110    	; 0x108 <__bad_interrupt>
  9a:	00 00       	nop
  9c:	35 c0       	rjmp	.+106    	; 0x108 <__bad_interrupt>
  9e:	00 00       	nop
  a0:	33 c0       	rjmp	.+102    	; 0x108 <__bad_interrupt>
  a2:	00 00       	nop
  a4:	31 c0       	rjmp	.+98     	; 0x108 <__bad_interrupt>
  a6:	00 00       	nop
  a8:	2f c0       	rjmp	.+94     	; 0x108 <__bad_interrupt>
  aa:	00 00       	nop
  ac:	2d c0       	rjmp	.+90     	; 0x108 <__bad_interrupt>
  ae:	00 00       	nop
  b0:	2b c0       	rjmp	.+86     	; 0x108 <__bad_interrupt>
  b2:	00 00       	nop
  b4:	29 c0       	rjmp	.+82     	; 0x108 <__bad_interrupt>
  b6:	00 00       	nop
  b8:	27 c0       	rjmp	.+78     	; 0x108 <__bad_interrupt>
  ba:	00 00       	nop
  bc:	25 c0       	rjmp	.+74     	; 0x108 <__bad_interrupt>
  be:	00 00       	nop
  c0:	23 c0       	rjmp	.+70     	; 0x108 <__bad_interrupt>
  c2:	00 00       	nop
  c4:	21 c0       	rjmp	.+66     	; 0x108 <__bad_interrupt>
  c6:	00 00       	nop
  c8:	1f c0       	rjmp	.+62     	; 0x108 <__bad_interrupt>
  ca:	00 00       	nop
  cc:	15 c3       	rjmp	.+1578   	; 0x6f8 <__vector_51>
  ce:	00 00       	nop
  d0:	1b c0       	rjmp	.+54     	; 0x108 <__bad_interrupt>
  d2:	00 00       	nop
  d4:	19 c0       	rjmp	.+50     	; 0x108 <__bad_interrupt>
  d6:	00 00       	nop
  d8:	17 c0       	rjmp	.+46     	; 0x108 <__bad_interrupt>
  da:	00 00       	nop
  dc:	15 c0       	rjmp	.+42     	; 0x108 <__bad_interrupt>
  de:	00 00       	nop
  e0:	13 c0       	rjmp	.+38     	; 0x108 <__bad_interrupt>
	...

000000e4 <__ctors_end>:
  e4:	11 24       	eor	r1, r1
  e6:	1f be       	out	0x3f, r1	; 63
  e8:	cf ef       	ldi	r28, 0xFF	; 255
  ea:	d1 e2       	ldi	r29, 0x21	; 33
  ec:	de bf       	out	0x3e, r29	; 62
  ee:	cd bf       	out	0x3d, r28	; 61
  f0:	00 e0       	ldi	r16, 0x00	; 0
  f2:	0c bf       	out	0x3c, r16	; 60

000000f4 <__do_clear_bss>:
  f4:	22 e0       	ldi	r18, 0x02	; 2
  f6:	a0 e0       	ldi	r26, 0x00	; 0
  f8:	b2 e0       	ldi	r27, 0x02	; 2
  fa:	01 c0       	rjmp	.+2      	; 0xfe <.do_clear_bss_start>

000000fc <.do_clear_bss_loop>:
  fc:	1d 92       	st	X+, r1

000000fe <.do_clear_bss_start>:
  fe:	aa 34       	cpi	r26, 0x4A	; 74
 100:	b2 07       	cpc	r27, r18
 102:	e1 f7       	brne	.-8      	; 0xfc <.do_clear_bss_loop>
 104:	fc d4       	rcall	.+2552   	; 0xafe <main>
 106:	24 c6       	rjmp	.+3144   	; 0xd50 <_exit>

00000108 <__bad_interrupt>:
 108:	7b cf       	rjmp	.-266    	; 0x0 <__vectors>

0000010a <buzzer_pin_config>:
volatile unsigned long int ShaftCountRight = 0; //to keep track of right position encoder
volatile unsigned int Degrees; //to accept angle in degrees for turning

//*****************************
void buzzer_pin_config (void)
{
 10a:	cf 93       	push	r28
 10c:	df 93       	push	r29
 10e:	cd b7       	in	r28, 0x3d	; 61
 110:	de b7       	in	r29, 0x3e	; 62
	DDRC = DDRC | 0x08;		//Setting PORTC 3 as outpt
 112:	87 e2       	ldi	r24, 0x27	; 39
 114:	90 e0       	ldi	r25, 0x00	; 0
 116:	27 e2       	ldi	r18, 0x27	; 39
 118:	30 e0       	ldi	r19, 0x00	; 0
 11a:	f9 01       	movw	r30, r18
 11c:	20 81       	ld	r18, Z
 11e:	28 60       	ori	r18, 0x08	; 8
 120:	fc 01       	movw	r30, r24
 122:	20 83       	st	Z, r18
	PORTC = PORTC & 0xF7;		//Setting PORTC 3 logic low to turnoff buzzer
 124:	88 e2       	ldi	r24, 0x28	; 40
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	28 e2       	ldi	r18, 0x28	; 40
 12a:	30 e0       	ldi	r19, 0x00	; 0
 12c:	f9 01       	movw	r30, r18
 12e:	20 81       	ld	r18, Z
 130:	27 7f       	andi	r18, 0xF7	; 247
 132:	fc 01       	movw	r30, r24
 134:	20 83       	st	Z, r18
}
 136:	df 91       	pop	r29
 138:	cf 91       	pop	r28
 13a:	08 95       	ret

0000013c <motion_pin_config>:

void motion_pin_config (void)
{
 13c:	cf 93       	push	r28
 13e:	df 93       	push	r29
 140:	cd b7       	in	r28, 0x3d	; 61
 142:	de b7       	in	r29, 0x3e	; 62
	DDRA = DDRA | 0x0F;
 144:	81 e2       	ldi	r24, 0x21	; 33
 146:	90 e0       	ldi	r25, 0x00	; 0
 148:	21 e2       	ldi	r18, 0x21	; 33
 14a:	30 e0       	ldi	r19, 0x00	; 0
 14c:	f9 01       	movw	r30, r18
 14e:	20 81       	ld	r18, Z
 150:	2f 60       	ori	r18, 0x0F	; 15
 152:	fc 01       	movw	r30, r24
 154:	20 83       	st	Z, r18
	PORTA = PORTA & 0xF0;
 156:	82 e2       	ldi	r24, 0x22	; 34
 158:	90 e0       	ldi	r25, 0x00	; 0
 15a:	22 e2       	ldi	r18, 0x22	; 34
 15c:	30 e0       	ldi	r19, 0x00	; 0
 15e:	f9 01       	movw	r30, r18
 160:	20 81       	ld	r18, Z
 162:	20 7f       	andi	r18, 0xF0	; 240
 164:	fc 01       	movw	r30, r24
 166:	20 83       	st	Z, r18
	DDRL = DDRL | 0x18;   //Setting PL3 and PL4 pins as output for PWM generation
 168:	8a e0       	ldi	r24, 0x0A	; 10
 16a:	91 e0       	ldi	r25, 0x01	; 1
 16c:	2a e0       	ldi	r18, 0x0A	; 10
 16e:	31 e0       	ldi	r19, 0x01	; 1
 170:	f9 01       	movw	r30, r18
 172:	20 81       	ld	r18, Z
 174:	28 61       	ori	r18, 0x18	; 24
 176:	fc 01       	movw	r30, r24
 178:	20 83       	st	Z, r18
	PORTL = PORTL | 0x18; //PL3 and PL4 pins are for velocity control using PWM.
 17a:	8b e0       	ldi	r24, 0x0B	; 11
 17c:	91 e0       	ldi	r25, 0x01	; 1
 17e:	2b e0       	ldi	r18, 0x0B	; 11
 180:	31 e0       	ldi	r19, 0x01	; 1
 182:	f9 01       	movw	r30, r18
 184:	20 81       	ld	r18, Z
 186:	28 61       	ori	r18, 0x18	; 24
 188:	fc 01       	movw	r30, r24
 18a:	20 83       	st	Z, r18
}
 18c:	df 91       	pop	r29
 18e:	cf 91       	pop	r28
 190:	08 95       	ret

00000192 <left_encoder_pin_config>:

//Function to configure INT4 (PORTE 4) pin as input for the left position encoder
void left_encoder_pin_config (void)
{
 192:	cf 93       	push	r28
 194:	df 93       	push	r29
 196:	cd b7       	in	r28, 0x3d	; 61
 198:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xEF;  //Set the direction of the PORTE 4 pin as input
 19a:	8d e2       	ldi	r24, 0x2D	; 45
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	2d e2       	ldi	r18, 0x2D	; 45
 1a0:	30 e0       	ldi	r19, 0x00	; 0
 1a2:	f9 01       	movw	r30, r18
 1a4:	20 81       	ld	r18, Z
 1a6:	2f 7e       	andi	r18, 0xEF	; 239
 1a8:	fc 01       	movw	r30, r24
 1aa:	20 83       	st	Z, r18
	PORTE = PORTE | 0x10; //Enable internal pull-up for PORTE 4 pin
 1ac:	8e e2       	ldi	r24, 0x2E	; 46
 1ae:	90 e0       	ldi	r25, 0x00	; 0
 1b0:	2e e2       	ldi	r18, 0x2E	; 46
 1b2:	30 e0       	ldi	r19, 0x00	; 0
 1b4:	f9 01       	movw	r30, r18
 1b6:	20 81       	ld	r18, Z
 1b8:	20 61       	ori	r18, 0x10	; 16
 1ba:	fc 01       	movw	r30, r24
 1bc:	20 83       	st	Z, r18
}
 1be:	df 91       	pop	r29
 1c0:	cf 91       	pop	r28
 1c2:	08 95       	ret

000001c4 <right_encoder_pin_config>:

//Function to configure INT5 (PORTE 5) pin as input for the right position encoder
void right_encoder_pin_config (void)
{
 1c4:	cf 93       	push	r28
 1c6:	df 93       	push	r29
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
	DDRE  = DDRE & 0xDF;  //Set the direction of the PORTE 4 pin as input
 1cc:	8d e2       	ldi	r24, 0x2D	; 45
 1ce:	90 e0       	ldi	r25, 0x00	; 0
 1d0:	2d e2       	ldi	r18, 0x2D	; 45
 1d2:	30 e0       	ldi	r19, 0x00	; 0
 1d4:	f9 01       	movw	r30, r18
 1d6:	20 81       	ld	r18, Z
 1d8:	2f 7d       	andi	r18, 0xDF	; 223
 1da:	fc 01       	movw	r30, r24
 1dc:	20 83       	st	Z, r18
	PORTE = PORTE | 0x20; //Enable internal pull-up for PORTE 4 pin
 1de:	8e e2       	ldi	r24, 0x2E	; 46
 1e0:	90 e0       	ldi	r25, 0x00	; 0
 1e2:	2e e2       	ldi	r18, 0x2E	; 46
 1e4:	30 e0       	ldi	r19, 0x00	; 0
 1e6:	f9 01       	movw	r30, r18
 1e8:	20 81       	ld	r18, Z
 1ea:	20 62       	ori	r18, 0x20	; 32
 1ec:	fc 01       	movw	r30, r24
 1ee:	20 83       	st	Z, r18
}
 1f0:	df 91       	pop	r29
 1f2:	cf 91       	pop	r28
 1f4:	08 95       	ret

000001f6 <adc_pin_config>:

//ADC pin configuration
void adc_pin_config (void)
{
 1f6:	cf 93       	push	r28
 1f8:	df 93       	push	r29
 1fa:	cd b7       	in	r28, 0x3d	; 61
 1fc:	de b7       	in	r29, 0x3e	; 62
	DDRF = 0x00;  //set PORTF direction as input
 1fe:	80 e3       	ldi	r24, 0x30	; 48
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	fc 01       	movw	r30, r24
 204:	10 82       	st	Z, r1
	PORTF = 0x00; //set PORTF pins floating
 206:	81 e3       	ldi	r24, 0x31	; 49
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	fc 01       	movw	r30, r24
 20c:	10 82       	st	Z, r1
	DDRK = 0x00;  //set PORTK direction as input
 20e:	87 e0       	ldi	r24, 0x07	; 7
 210:	91 e0       	ldi	r25, 0x01	; 1
 212:	fc 01       	movw	r30, r24
 214:	10 82       	st	Z, r1
	PORTK = 0x00; //set PORTK pins floating
 216:	88 e0       	ldi	r24, 0x08	; 8
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	fc 01       	movw	r30, r24
 21c:	10 82       	st	Z, r1
}
 21e:	df 91       	pop	r29
 220:	cf 91       	pop	r28
 222:	08 95       	ret

00000224 <port_init>:


//Function to initialize ports
void port_init()
{
 224:	cf 93       	push	r28
 226:	df 93       	push	r29
 228:	cd b7       	in	r28, 0x3d	; 61
 22a:	de b7       	in	r29, 0x3e	; 62
	motion_pin_config();
 22c:	87 df       	rcall	.-242    	; 0x13c <motion_pin_config>
	buzzer_pin_config();
 22e:	6d df       	rcall	.-294    	; 0x10a <buzzer_pin_config>
	left_encoder_pin_config();
 230:	b0 df       	rcall	.-160    	; 0x192 <left_encoder_pin_config>
	right_encoder_pin_config();
 232:	c8 df       	rcall	.-112    	; 0x1c4 <right_encoder_pin_config>
	adc_pin_config();
 234:	e0 df       	rcall	.-64     	; 0x1f6 <adc_pin_config>
}
 236:	df 91       	pop	r29
 238:	cf 91       	pop	r28
 23a:	08 95       	ret

0000023c <uart2_init>:
// desired baud rate:9600
// actual baud rate:9600 (error 0.0%)
// char size: 8 bit
// parity: Disabled
void uart2_init(void)
{
 23c:	cf 93       	push	r28
 23e:	df 93       	push	r29
 240:	cd b7       	in	r28, 0x3d	; 61
 242:	de b7       	in	r29, 0x3e	; 62
	UCSR2B = 0x00; //disable while setting baud rate
 244:	81 ed       	ldi	r24, 0xD1	; 209
 246:	90 e0       	ldi	r25, 0x00	; 0
 248:	fc 01       	movw	r30, r24
 24a:	10 82       	st	Z, r1
	UCSR2A = 0x00;
 24c:	80 ed       	ldi	r24, 0xD0	; 208
 24e:	90 e0       	ldi	r25, 0x00	; 0
 250:	fc 01       	movw	r30, r24
 252:	10 82       	st	Z, r1
	UCSR2C = 0x06;
 254:	82 ed       	ldi	r24, 0xD2	; 210
 256:	90 e0       	ldi	r25, 0x00	; 0
 258:	26 e0       	ldi	r18, 0x06	; 6
 25a:	fc 01       	movw	r30, r24
 25c:	20 83       	st	Z, r18
	UBRR2L = 0x5F; //set baud rate lo
 25e:	84 ed       	ldi	r24, 0xD4	; 212
 260:	90 e0       	ldi	r25, 0x00	; 0
 262:	2f e5       	ldi	r18, 0x5F	; 95
 264:	fc 01       	movw	r30, r24
 266:	20 83       	st	Z, r18
	UBRR2H = 0x00; //set baud rate hi
 268:	85 ed       	ldi	r24, 0xD5	; 213
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	fc 01       	movw	r30, r24
 26e:	10 82       	st	Z, r1
	UCSR2B = 0x98;
 270:	81 ed       	ldi	r24, 0xD1	; 209
 272:	90 e0       	ldi	r25, 0x00	; 0
 274:	28 e9       	ldi	r18, 0x98	; 152
 276:	fc 01       	movw	r30, r24
 278:	20 83       	st	Z, r18
}
 27a:	df 91       	pop	r29
 27c:	cf 91       	pop	r28
 27e:	08 95       	ret

00000280 <adc_init>:

//ADC initialize
// Conversion time: 56uS
void adc_init(void)
{
 280:	cf 93       	push	r28
 282:	df 93       	push	r29
 284:	cd b7       	in	r28, 0x3d	; 61
 286:	de b7       	in	r29, 0x3e	; 62
	ADCSRA = 0x00;
 288:	8a e7       	ldi	r24, 0x7A	; 122
 28a:	90 e0       	ldi	r25, 0x00	; 0
 28c:	fc 01       	movw	r30, r24
 28e:	10 82       	st	Z, r1
	ADCSRB = 0x00;		//MUX5 = 0
 290:	8b e7       	ldi	r24, 0x7B	; 123
 292:	90 e0       	ldi	r25, 0x00	; 0
 294:	fc 01       	movw	r30, r24
 296:	10 82       	st	Z, r1
	ADMUX = 0x20;		//Vref=5V external --- ADLAR=1 --- MUX4:0 = 0000
 298:	8c e7       	ldi	r24, 0x7C	; 124
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	20 e2       	ldi	r18, 0x20	; 32
 29e:	fc 01       	movw	r30, r24
 2a0:	20 83       	st	Z, r18
	ACSR = 0x80;
 2a2:	80 e5       	ldi	r24, 0x50	; 80
 2a4:	90 e0       	ldi	r25, 0x00	; 0
 2a6:	20 e8       	ldi	r18, 0x80	; 128
 2a8:	fc 01       	movw	r30, r24
 2aa:	20 83       	st	Z, r18
	ADCSRA = 0x86;		//ADEN=1 --- ADIE=1 --- ADPS2:0 = 1 1 0
 2ac:	8a e7       	ldi	r24, 0x7A	; 122
 2ae:	90 e0       	ldi	r25, 0x00	; 0
 2b0:	26 e8       	ldi	r18, 0x86	; 134
 2b2:	fc 01       	movw	r30, r24
 2b4:	20 83       	st	Z, r18
}
 2b6:	df 91       	pop	r29
 2b8:	cf 91       	pop	r28
 2ba:	08 95       	ret

000002bc <timer5_init>:
// Timer 5 initialized in PWM mode for velocity control
// Prescale:256
// PWM 8bit fast, TOP=0x00FF
// Timer Frequency:225.000Hz
void timer5_init()
{
 2bc:	cf 93       	push	r28
 2be:	df 93       	push	r29
 2c0:	cd b7       	in	r28, 0x3d	; 61
 2c2:	de b7       	in	r29, 0x3e	; 62
	TCCR5B = 0x00;	//Stop
 2c4:	81 e2       	ldi	r24, 0x21	; 33
 2c6:	91 e0       	ldi	r25, 0x01	; 1
 2c8:	fc 01       	movw	r30, r24
 2ca:	10 82       	st	Z, r1
	TCNT5H = 0xFF;	//Counter higher 8-bit value to which OCR5xH value is compared with
 2cc:	85 e2       	ldi	r24, 0x25	; 37
 2ce:	91 e0       	ldi	r25, 0x01	; 1
 2d0:	2f ef       	ldi	r18, 0xFF	; 255
 2d2:	fc 01       	movw	r30, r24
 2d4:	20 83       	st	Z, r18
	TCNT5L = 0x01;	//Counter lower 8-bit value to which OCR5xH value is compared with
 2d6:	84 e2       	ldi	r24, 0x24	; 36
 2d8:	91 e0       	ldi	r25, 0x01	; 1
 2da:	21 e0       	ldi	r18, 0x01	; 1
 2dc:	fc 01       	movw	r30, r24
 2de:	20 83       	st	Z, r18
	OCR5AH = 0x00;	//Output compare register high value for Left Motor
 2e0:	89 e2       	ldi	r24, 0x29	; 41
 2e2:	91 e0       	ldi	r25, 0x01	; 1
 2e4:	fc 01       	movw	r30, r24
 2e6:	10 82       	st	Z, r1
	OCR5AL = 0xFF;	//Output compare register low value for Left Motor
 2e8:	88 e2       	ldi	r24, 0x28	; 40
 2ea:	91 e0       	ldi	r25, 0x01	; 1
 2ec:	2f ef       	ldi	r18, 0xFF	; 255
 2ee:	fc 01       	movw	r30, r24
 2f0:	20 83       	st	Z, r18
	OCR5BH = 0x00;	//Output compare register high value for Right Motor
 2f2:	8b e2       	ldi	r24, 0x2B	; 43
 2f4:	91 e0       	ldi	r25, 0x01	; 1
 2f6:	fc 01       	movw	r30, r24
 2f8:	10 82       	st	Z, r1
	OCR5BL = 0xFF;	//Output compare register low value for Right Motor
 2fa:	8a e2       	ldi	r24, 0x2A	; 42
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	2f ef       	ldi	r18, 0xFF	; 255
 300:	fc 01       	movw	r30, r24
 302:	20 83       	st	Z, r18
	OCR5CH = 0x00;	//Output compare register high value for Motor C1
 304:	8d e2       	ldi	r24, 0x2D	; 45
 306:	91 e0       	ldi	r25, 0x01	; 1
 308:	fc 01       	movw	r30, r24
 30a:	10 82       	st	Z, r1
	OCR5CL = 0xFF;	//Output compare register low value for Motor C1
 30c:	8c e2       	ldi	r24, 0x2C	; 44
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	2f ef       	ldi	r18, 0xFF	; 255
 312:	fc 01       	movw	r30, r24
 314:	20 83       	st	Z, r18
	TCCR5A = 0xA9;	/*{COM5A1=1, COM5A0=0; COM5B1=1, COM5B0=0; COM5C1=1 COM5C0=0}
 316:	80 e2       	ldi	r24, 0x20	; 32
 318:	91 e0       	ldi	r25, 0x01	; 1
 31a:	29 ea       	ldi	r18, 0xA9	; 169
 31c:	fc 01       	movw	r30, r24
 31e:	20 83       	st	Z, r18
 					  For Overriding normal port functionality to OCRnA outputs.
				  	  {WGM51=0, WGM50=1} Along With WGM52 in TCCR5B for Selecting FAST PWM 8-bit Mode*/
	
	TCCR5B = 0x0B;	//WGM12=1; CS12=0, CS11=1, CS10=1 (Prescaler=64)
 320:	81 e2       	ldi	r24, 0x21	; 33
 322:	91 e0       	ldi	r25, 0x01	; 1
 324:	2b e0       	ldi	r18, 0x0B	; 11
 326:	fc 01       	movw	r30, r24
 328:	20 83       	st	Z, r18
}
 32a:	df 91       	pop	r29
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <left_position_encoder_interrupt_init>:

void left_position_encoder_interrupt_init (void) //Interrupt 4 enable
{
 330:	cf 93       	push	r28
 332:	df 93       	push	r29
 334:	cd b7       	in	r28, 0x3d	; 61
 336:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
 338:	f8 94       	cli
	EICRB = EICRB | 0x02; // INT4 is set to trigger with falling edge
 33a:	8a e6       	ldi	r24, 0x6A	; 106
 33c:	90 e0       	ldi	r25, 0x00	; 0
 33e:	2a e6       	ldi	r18, 0x6A	; 106
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	f9 01       	movw	r30, r18
 344:	20 81       	ld	r18, Z
 346:	22 60       	ori	r18, 0x02	; 2
 348:	fc 01       	movw	r30, r24
 34a:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x10; // Enable Interrupt INT4 for left position encoder
 34c:	8d e3       	ldi	r24, 0x3D	; 61
 34e:	90 e0       	ldi	r25, 0x00	; 0
 350:	2d e3       	ldi	r18, 0x3D	; 61
 352:	30 e0       	ldi	r19, 0x00	; 0
 354:	f9 01       	movw	r30, r18
 356:	20 81       	ld	r18, Z
 358:	20 61       	ori	r18, 0x10	; 16
 35a:	fc 01       	movw	r30, r24
 35c:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
 35e:	78 94       	sei
}
 360:	df 91       	pop	r29
 362:	cf 91       	pop	r28
 364:	08 95       	ret

00000366 <right_position_encoder_interrupt_init>:

void right_position_encoder_interrupt_init (void) //Interrupt 5 enable
{
 366:	cf 93       	push	r28
 368:	df 93       	push	r29
 36a:	cd b7       	in	r28, 0x3d	; 61
 36c:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupt
 36e:	f8 94       	cli
	EICRB = EICRB | 0x08; // INT5 is set to trigger with falling edge
 370:	8a e6       	ldi	r24, 0x6A	; 106
 372:	90 e0       	ldi	r25, 0x00	; 0
 374:	2a e6       	ldi	r18, 0x6A	; 106
 376:	30 e0       	ldi	r19, 0x00	; 0
 378:	f9 01       	movw	r30, r18
 37a:	20 81       	ld	r18, Z
 37c:	28 60       	ori	r18, 0x08	; 8
 37e:	fc 01       	movw	r30, r24
 380:	20 83       	st	Z, r18
	EIMSK = EIMSK | 0x20; // Enable Interrupt INT5 for right position encoder
 382:	8d e3       	ldi	r24, 0x3D	; 61
 384:	90 e0       	ldi	r25, 0x00	; 0
 386:	2d e3       	ldi	r18, 0x3D	; 61
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	f9 01       	movw	r30, r18
 38c:	20 81       	ld	r18, Z
 38e:	20 62       	ori	r18, 0x20	; 32
 390:	fc 01       	movw	r30, r24
 392:	20 83       	st	Z, r18
	sei();   // Enables the global interrupt
 394:	78 94       	sei
}
 396:	df 91       	pop	r29
 398:	cf 91       	pop	r28
 39a:	08 95       	ret

0000039c <__vector_6>:

//ISR for right position encoder
ISR(INT5_vect)
{
 39c:	1f 92       	push	r1
 39e:	0f 92       	push	r0
 3a0:	00 90 5f 00 	lds	r0, 0x005F
 3a4:	0f 92       	push	r0
 3a6:	11 24       	eor	r1, r1
 3a8:	8f 93       	push	r24
 3aa:	9f 93       	push	r25
 3ac:	af 93       	push	r26
 3ae:	bf 93       	push	r27
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	cd b7       	in	r28, 0x3d	; 61
 3b6:	de b7       	in	r29, 0x3e	; 62
	ShaftCountRight++;  //increment right shaft position count
 3b8:	80 91 42 02 	lds	r24, 0x0242
 3bc:	90 91 43 02 	lds	r25, 0x0243
 3c0:	a0 91 44 02 	lds	r26, 0x0244
 3c4:	b0 91 45 02 	lds	r27, 0x0245
 3c8:	01 96       	adiw	r24, 0x01	; 1
 3ca:	a1 1d       	adc	r26, r1
 3cc:	b1 1d       	adc	r27, r1
 3ce:	80 93 42 02 	sts	0x0242, r24
 3d2:	90 93 43 02 	sts	0x0243, r25
 3d6:	a0 93 44 02 	sts	0x0244, r26
 3da:	b0 93 45 02 	sts	0x0245, r27
}
 3de:	df 91       	pop	r29
 3e0:	cf 91       	pop	r28
 3e2:	bf 91       	pop	r27
 3e4:	af 91       	pop	r26
 3e6:	9f 91       	pop	r25
 3e8:	8f 91       	pop	r24
 3ea:	0f 90       	pop	r0
 3ec:	00 92 5f 00 	sts	0x005F, r0
 3f0:	0f 90       	pop	r0
 3f2:	1f 90       	pop	r1
 3f4:	18 95       	reti

000003f6 <__vector_5>:


//ISR for left position encoder
ISR(INT4_vect)
{
 3f6:	1f 92       	push	r1
 3f8:	0f 92       	push	r0
 3fa:	00 90 5f 00 	lds	r0, 0x005F
 3fe:	0f 92       	push	r0
 400:	11 24       	eor	r1, r1
 402:	8f 93       	push	r24
 404:	9f 93       	push	r25
 406:	af 93       	push	r26
 408:	bf 93       	push	r27
 40a:	cf 93       	push	r28
 40c:	df 93       	push	r29
 40e:	cd b7       	in	r28, 0x3d	; 61
 410:	de b7       	in	r29, 0x3e	; 62
	ShaftCountLeft++;  //increment left shaft position count
 412:	80 91 3e 02 	lds	r24, 0x023E
 416:	90 91 3f 02 	lds	r25, 0x023F
 41a:	a0 91 40 02 	lds	r26, 0x0240
 41e:	b0 91 41 02 	lds	r27, 0x0241
 422:	01 96       	adiw	r24, 0x01	; 1
 424:	a1 1d       	adc	r26, r1
 426:	b1 1d       	adc	r27, r1
 428:	80 93 3e 02 	sts	0x023E, r24
 42c:	90 93 3f 02 	sts	0x023F, r25
 430:	a0 93 40 02 	sts	0x0240, r26
 434:	b0 93 41 02 	sts	0x0241, r27
}
 438:	df 91       	pop	r29
 43a:	cf 91       	pop	r28
 43c:	bf 91       	pop	r27
 43e:	af 91       	pop	r26
 440:	9f 91       	pop	r25
 442:	8f 91       	pop	r24
 444:	0f 90       	pop	r0
 446:	00 92 5f 00 	sts	0x005F, r0
 44a:	0f 90       	pop	r0
 44c:	1f 90       	pop	r1
 44e:	18 95       	reti

00000450 <init_devices>:

//Function To Initialize all The Devices
void init_devices()
{
 450:	cf 93       	push	r28
 452:	df 93       	push	r29
 454:	cd b7       	in	r28, 0x3d	; 61
 456:	de b7       	in	r29, 0x3e	; 62
	cli(); //Clears the global interrupts
 458:	f8 94       	cli
	port_init();  //Initializes all the ports
 45a:	e4 de       	rcall	.-568    	; 0x224 <port_init>
	uart2_init(); //Initialize UART1 for serial communication
 45c:	ef de       	rcall	.-546    	; 0x23c <uart2_init>
	adc_init(); 
 45e:	10 df       	rcall	.-480    	; 0x280 <adc_init>
	timer5_init();
 460:	2d df       	rcall	.-422    	; 0x2bc <timer5_init>
	left_position_encoder_interrupt_init();
 462:	66 df       	rcall	.-308    	; 0x330 <left_position_encoder_interrupt_init>
	right_position_encoder_interrupt_init();
 464:	80 df       	rcall	.-256    	; 0x366 <right_position_encoder_interrupt_init>
	sei();   //Enables the global interrupts
 466:	78 94       	sei
} 
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	08 95       	ret

0000046e <ADC_Conversion>:

//-------------------------------------------------------------------------------
//-- ADC Conversion Function --------------
//-------------------------------------------------------------------------------
unsigned char ADC_Conversion(unsigned char ch)
{
 46e:	cf 93       	push	r28
 470:	df 93       	push	r29
 472:	1f 92       	push	r1
 474:	1f 92       	push	r1
 476:	cd b7       	in	r28, 0x3d	; 61
 478:	de b7       	in	r29, 0x3e	; 62
 47a:	8a 83       	std	Y+2, r24	; 0x02
	unsigned char a;
	if(ch>7)
 47c:	8a 81       	ldd	r24, Y+2	; 0x02
 47e:	88 30       	cpi	r24, 0x08	; 8
 480:	28 f0       	brcs	.+10     	; 0x48c <ADC_Conversion+0x1e>
	{
		ADCSRB = 0x08;
 482:	8b e7       	ldi	r24, 0x7B	; 123
 484:	90 e0       	ldi	r25, 0x00	; 0
 486:	28 e0       	ldi	r18, 0x08	; 8
 488:	fc 01       	movw	r30, r24
 48a:	20 83       	st	Z, r18
	}
	ch = ch & 0x07;			  //Store only 3 LSB bits
 48c:	8a 81       	ldd	r24, Y+2	; 0x02
 48e:	87 70       	andi	r24, 0x07	; 7
 490:	8a 83       	std	Y+2, r24	; 0x02
	ADMUX= 0x20 | ch;			  //Select the ADC channel with left adjust select
 492:	8c e7       	ldi	r24, 0x7C	; 124
 494:	90 e0       	ldi	r25, 0x00	; 0
 496:	2a 81       	ldd	r18, Y+2	; 0x02
 498:	20 62       	ori	r18, 0x20	; 32
 49a:	fc 01       	movw	r30, r24
 49c:	20 83       	st	Z, r18
	ADC_flag = 0x00; 			  //Clear the user defined flag
 49e:	10 92 46 02 	sts	0x0246, r1
	ADCSRA = ADCSRA | 0x40;	  //Set start conversion bit
 4a2:	8a e7       	ldi	r24, 0x7A	; 122
 4a4:	90 e0       	ldi	r25, 0x00	; 0
 4a6:	2a e7       	ldi	r18, 0x7A	; 122
 4a8:	30 e0       	ldi	r19, 0x00	; 0
 4aa:	f9 01       	movw	r30, r18
 4ac:	20 81       	ld	r18, Z
 4ae:	20 64       	ori	r18, 0x40	; 64
 4b0:	fc 01       	movw	r30, r24
 4b2:	20 83       	st	Z, r18
	while((ADCSRA&0x10)==0);	  //Wait for ADC conversion to complete
 4b4:	00 00       	nop
 4b6:	8a e7       	ldi	r24, 0x7A	; 122
 4b8:	90 e0       	ldi	r25, 0x00	; 0
 4ba:	fc 01       	movw	r30, r24
 4bc:	80 81       	ld	r24, Z
 4be:	88 2f       	mov	r24, r24
 4c0:	90 e0       	ldi	r25, 0x00	; 0
 4c2:	80 71       	andi	r24, 0x10	; 16
 4c4:	99 27       	eor	r25, r25
 4c6:	00 97       	sbiw	r24, 0x00	; 0
 4c8:	b1 f3       	breq	.-20     	; 0x4b6 <ADC_Conversion+0x48>
	a=ADCH;
 4ca:	89 e7       	ldi	r24, 0x79	; 121
 4cc:	90 e0       	ldi	r25, 0x00	; 0
 4ce:	fc 01       	movw	r30, r24
 4d0:	80 81       	ld	r24, Z
 4d2:	89 83       	std	Y+1, r24	; 0x01
	ADCSRA = ADCSRA|0x10;        //clear ADIF (ADC Interrupt Flag) by writing 1 to it
 4d4:	8a e7       	ldi	r24, 0x7A	; 122
 4d6:	90 e0       	ldi	r25, 0x00	; 0
 4d8:	2a e7       	ldi	r18, 0x7A	; 122
 4da:	30 e0       	ldi	r19, 0x00	; 0
 4dc:	f9 01       	movw	r30, r18
 4de:	20 81       	ld	r18, Z
 4e0:	20 61       	ori	r18, 0x10	; 16
 4e2:	fc 01       	movw	r30, r24
 4e4:	20 83       	st	Z, r18
	ADCSRB = 0x00;
 4e6:	8b e7       	ldi	r24, 0x7B	; 123
 4e8:	90 e0       	ldi	r25, 0x00	; 0
 4ea:	fc 01       	movw	r30, r24
 4ec:	10 82       	st	Z, r1
	return a;
 4ee:	89 81       	ldd	r24, Y+1	; 0x01
}
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	df 91       	pop	r29
 4f6:	cf 91       	pop	r28
 4f8:	08 95       	ret

000004fa <velocity>:

// Function for robot velocity control
void velocity (unsigned char left_motor, unsigned char right_motor)
{
 4fa:	cf 93       	push	r28
 4fc:	df 93       	push	r29
 4fe:	1f 92       	push	r1
 500:	1f 92       	push	r1
 502:	cd b7       	in	r28, 0x3d	; 61
 504:	de b7       	in	r29, 0x3e	; 62
 506:	89 83       	std	Y+1, r24	; 0x01
 508:	6a 83       	std	Y+2, r22	; 0x02
	OCR5AL = (unsigned char)left_motor;
 50a:	88 e2       	ldi	r24, 0x28	; 40
 50c:	91 e0       	ldi	r25, 0x01	; 1
 50e:	29 81       	ldd	r18, Y+1	; 0x01
 510:	fc 01       	movw	r30, r24
 512:	20 83       	st	Z, r18
	OCR5BL = (unsigned char)right_motor;
 514:	8a e2       	ldi	r24, 0x2A	; 42
 516:	91 e0       	ldi	r25, 0x01	; 1
 518:	2a 81       	ldd	r18, Y+2	; 0x02
 51a:	fc 01       	movw	r30, r24
 51c:	20 83       	st	Z, r18
}
 51e:	0f 90       	pop	r0
 520:	0f 90       	pop	r0
 522:	df 91       	pop	r29
 524:	cf 91       	pop	r28
 526:	08 95       	ret

00000528 <motor_enable>:

void motor_enable (void)
{
 528:	cf 93       	push	r28
 52a:	df 93       	push	r29
 52c:	cd b7       	in	r28, 0x3d	; 61
 52e:	de b7       	in	r29, 0x3e	; 62
	PORTL |= 18;		// Enable left and right motor. Used with function where velocity is not used
 530:	8b e0       	ldi	r24, 0x0B	; 11
 532:	91 e0       	ldi	r25, 0x01	; 1
 534:	2b e0       	ldi	r18, 0x0B	; 11
 536:	31 e0       	ldi	r19, 0x01	; 1
 538:	f9 01       	movw	r30, r18
 53a:	20 81       	ld	r18, Z
 53c:	22 61       	ori	r18, 0x12	; 18
 53e:	fc 01       	movw	r30, r24
 540:	20 83       	st	Z, r18
}
 542:	df 91       	pop	r29
 544:	cf 91       	pop	r28
 546:	08 95       	ret

00000548 <buzzer_on>:
void buzzer_on (void)
{
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
 54c:	cd b7       	in	r28, 0x3d	; 61
 54e:	de b7       	in	r29, 0x3e	; 62
	PORTC |= 0x08;
 550:	88 e2       	ldi	r24, 0x28	; 40
 552:	90 e0       	ldi	r25, 0x00	; 0
 554:	28 e2       	ldi	r18, 0x28	; 40
 556:	30 e0       	ldi	r19, 0x00	; 0
 558:	f9 01       	movw	r30, r18
 55a:	20 81       	ld	r18, Z
 55c:	28 60       	ori	r18, 0x08	; 8
 55e:	fc 01       	movw	r30, r24
 560:	20 83       	st	Z, r18
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	08 95       	ret

00000568 <buzzer_off>:

void buzzer_off (void)
{
 568:	cf 93       	push	r28
 56a:	df 93       	push	r29
 56c:	cd b7       	in	r28, 0x3d	; 61
 56e:	de b7       	in	r29, 0x3e	; 62
	PORTC &= 0xF7;
 570:	88 e2       	ldi	r24, 0x28	; 40
 572:	90 e0       	ldi	r25, 0x00	; 0
 574:	28 e2       	ldi	r18, 0x28	; 40
 576:	30 e0       	ldi	r19, 0x00	; 0
 578:	f9 01       	movw	r30, r18
 57a:	20 81       	ld	r18, Z
 57c:	27 7f       	andi	r18, 0xF7	; 247
 57e:	fc 01       	movw	r30, r24
 580:	20 83       	st	Z, r18
}
 582:	df 91       	pop	r29
 584:	cf 91       	pop	r28
 586:	08 95       	ret

00000588 <forward>:

void forward (void)
{
 588:	cf 93       	push	r28
 58a:	df 93       	push	r29
 58c:	cd b7       	in	r28, 0x3d	; 61
 58e:	de b7       	in	r29, 0x3e	; 62
	//PORTA &= 0xF0;
	PORTA = 0x06;
 590:	82 e2       	ldi	r24, 0x22	; 34
 592:	90 e0       	ldi	r25, 0x00	; 0
 594:	26 e0       	ldi	r18, 0x06	; 6
 596:	fc 01       	movw	r30, r24
 598:	20 83       	st	Z, r18
}
 59a:	df 91       	pop	r29
 59c:	cf 91       	pop	r28
 59e:	08 95       	ret

000005a0 <back>:

void back (void)
{
 5a0:	cf 93       	push	r28
 5a2:	df 93       	push	r29
 5a4:	cd b7       	in	r28, 0x3d	; 61
 5a6:	de b7       	in	r29, 0x3e	; 62
	//PORTA &= 0xF0;
	PORTA = 0x09;
 5a8:	82 e2       	ldi	r24, 0x22	; 34
 5aa:	90 e0       	ldi	r25, 0x00	; 0
 5ac:	29 e0       	ldi	r18, 0x09	; 9
 5ae:	fc 01       	movw	r30, r24
 5b0:	20 83       	st	Z, r18
}
 5b2:	df 91       	pop	r29
 5b4:	cf 91       	pop	r28
 5b6:	08 95       	ret

000005b8 <left>:

void left (void)
{
 5b8:	cf 93       	push	r28
 5ba:	df 93       	push	r29
 5bc:	cd b7       	in	r28, 0x3d	; 61
 5be:	de b7       	in	r29, 0x3e	; 62
	//PORTA &= 0xF0;
	PORTA = 0x05;
 5c0:	82 e2       	ldi	r24, 0x22	; 34
 5c2:	90 e0       	ldi	r25, 0x00	; 0
 5c4:	25 e0       	ldi	r18, 0x05	; 5
 5c6:	fc 01       	movw	r30, r24
 5c8:	20 83       	st	Z, r18
}
 5ca:	df 91       	pop	r29
 5cc:	cf 91       	pop	r28
 5ce:	08 95       	ret

000005d0 <right>:

void right (void)
{
 5d0:	cf 93       	push	r28
 5d2:	df 93       	push	r29
 5d4:	cd b7       	in	r28, 0x3d	; 61
 5d6:	de b7       	in	r29, 0x3e	; 62
	//PORTA &= 0xF0;
	PORTA = 0x0A;
 5d8:	82 e2       	ldi	r24, 0x22	; 34
 5da:	90 e0       	ldi	r25, 0x00	; 0
 5dc:	2a e0       	ldi	r18, 0x0A	; 10
 5de:	fc 01       	movw	r30, r24
 5e0:	20 83       	st	Z, r18
}
 5e2:	df 91       	pop	r29
 5e4:	cf 91       	pop	r28
 5e6:	08 95       	ret

000005e8 <stop>:

void stop (void)
{
 5e8:	cf 93       	push	r28
 5ea:	df 93       	push	r29
 5ec:	cd b7       	in	r28, 0x3d	; 61
 5ee:	de b7       	in	r29, 0x3e	; 62
	PORTA = 0x00;
 5f0:	82 e2       	ldi	r24, 0x22	; 34
 5f2:	90 e0       	ldi	r25, 0x00	; 0
 5f4:	fc 01       	movw	r30, r24
 5f6:	10 82       	st	Z, r1
}
 5f8:	df 91       	pop	r29
 5fa:	cf 91       	pop	r28
 5fc:	08 95       	ret

000005fe <linear_distance_mm>:

//Function used for moving robot forward by specified distance

void linear_distance_mm(unsigned int DistanceInMM)
{
 5fe:	cf 93       	push	r28
 600:	df 93       	push	r29
 602:	cd b7       	in	r28, 0x3d	; 61
 604:	de b7       	in	r29, 0x3e	; 62
 606:	2a 97       	sbiw	r28, 0x0a	; 10
 608:	0f b6       	in	r0, 0x3f	; 63
 60a:	f8 94       	cli
 60c:	de bf       	out	0x3e, r29	; 62
 60e:	0f be       	out	0x3f, r0	; 63
 610:	cd bf       	out	0x3d, r28	; 61
 612:	9a 87       	std	Y+10, r25	; 0x0a
 614:	89 87       	std	Y+9, r24	; 0x09
	float ReqdShaftCount = 0;
 616:	19 82       	std	Y+1, r1	; 0x01
 618:	1a 82       	std	Y+2, r1	; 0x02
 61a:	1b 82       	std	Y+3, r1	; 0x03
 61c:	1c 82       	std	Y+4, r1	; 0x04
	unsigned long int ReqdShaftCountInt = 0;
 61e:	1d 82       	std	Y+5, r1	; 0x05
 620:	1e 82       	std	Y+6, r1	; 0x06
 622:	1f 82       	std	Y+7, r1	; 0x07
 624:	18 86       	std	Y+8, r1	; 0x08

	ReqdShaftCount = DistanceInMM / 5.338; // division by resolution to get shaft count
 626:	89 85       	ldd	r24, Y+9	; 0x09
 628:	9a 85       	ldd	r25, Y+10	; 0x0a
 62a:	cc 01       	movw	r24, r24
 62c:	a0 e0       	ldi	r26, 0x00	; 0
 62e:	b0 e0       	ldi	r27, 0x00	; 0
 630:	bc 01       	movw	r22, r24
 632:	cd 01       	movw	r24, r26
 634:	ff d2       	rcall	.+1534   	; 0xc34 <__floatunsisf>
 636:	dc 01       	movw	r26, r24
 638:	cb 01       	movw	r24, r22
 63a:	25 ee       	ldi	r18, 0xE5	; 229
 63c:	30 ed       	ldi	r19, 0xD0	; 208
 63e:	4a ea       	ldi	r20, 0xAA	; 170
 640:	50 e4       	ldi	r21, 0x40	; 64
 642:	bc 01       	movw	r22, r24
 644:	cd 01       	movw	r24, r26
 646:	62 d2       	rcall	.+1220   	; 0xb0c <__divsf3>
 648:	dc 01       	movw	r26, r24
 64a:	cb 01       	movw	r24, r22
 64c:	89 83       	std	Y+1, r24	; 0x01
 64e:	9a 83       	std	Y+2, r25	; 0x02
 650:	ab 83       	std	Y+3, r26	; 0x03
 652:	bc 83       	std	Y+4, r27	; 0x04
	ReqdShaftCountInt = (unsigned long int) ReqdShaftCount;
 654:	69 81       	ldd	r22, Y+1	; 0x01
 656:	7a 81       	ldd	r23, Y+2	; 0x02
 658:	8b 81       	ldd	r24, Y+3	; 0x03
 65a:	9c 81       	ldd	r25, Y+4	; 0x04
 65c:	bf d2       	rcall	.+1406   	; 0xbdc <__fixunssfsi>
 65e:	dc 01       	movw	r26, r24
 660:	cb 01       	movw	r24, r22
 662:	8d 83       	std	Y+5, r24	; 0x05
 664:	9e 83       	std	Y+6, r25	; 0x06
 666:	af 83       	std	Y+7, r26	; 0x07
 668:	b8 87       	std	Y+8, r27	; 0x08
	
	ShaftCountRight = 0;
 66a:	10 92 42 02 	sts	0x0242, r1
 66e:	10 92 43 02 	sts	0x0243, r1
 672:	10 92 44 02 	sts	0x0244, r1
 676:	10 92 45 02 	sts	0x0245, r1
	while(1)
	{
		if(ShaftCountRight > ReqdShaftCountInt)
 67a:	20 91 42 02 	lds	r18, 0x0242
 67e:	30 91 43 02 	lds	r19, 0x0243
 682:	40 91 44 02 	lds	r20, 0x0244
 686:	50 91 45 02 	lds	r21, 0x0245
 68a:	8d 81       	ldd	r24, Y+5	; 0x05
 68c:	9e 81       	ldd	r25, Y+6	; 0x06
 68e:	af 81       	ldd	r26, Y+7	; 0x07
 690:	b8 85       	ldd	r27, Y+8	; 0x08
 692:	82 17       	cp	r24, r18
 694:	93 07       	cpc	r25, r19
 696:	a4 07       	cpc	r26, r20
 698:	b5 07       	cpc	r27, r21
 69a:	08 f4       	brcc	.+2      	; 0x69e <linear_distance_mm+0xa0>
		{
			break;
 69c:	01 c0       	rjmp	.+2      	; 0x6a0 <linear_distance_mm+0xa2>
		}
	}
 69e:	ed cf       	rjmp	.-38     	; 0x67a <linear_distance_mm+0x7c>
	stop(); //Stop robot
 6a0:	a3 df       	rcall	.-186    	; 0x5e8 <stop>
}
 6a2:	2a 96       	adiw	r28, 0x0a	; 10
 6a4:	0f b6       	in	r0, 0x3f	; 63
 6a6:	f8 94       	cli
 6a8:	de bf       	out	0x3e, r29	; 62
 6aa:	0f be       	out	0x3f, r0	; 63
 6ac:	cd bf       	out	0x3d, r28	; 61
 6ae:	df 91       	pop	r29
 6b0:	cf 91       	pop	r28
 6b2:	08 95       	ret

000006b4 <forward_mm>:

void forward_mm(unsigned int DistanceInMM)
{
 6b4:	cf 93       	push	r28
 6b6:	df 93       	push	r29
 6b8:	1f 92       	push	r1
 6ba:	1f 92       	push	r1
 6bc:	cd b7       	in	r28, 0x3d	; 61
 6be:	de b7       	in	r29, 0x3e	; 62
 6c0:	9a 83       	std	Y+2, r25	; 0x02
 6c2:	89 83       	std	Y+1, r24	; 0x01
	forward();
 6c4:	61 df       	rcall	.-318    	; 0x588 <forward>
	linear_distance_mm(DistanceInMM);
 6c6:	89 81       	ldd	r24, Y+1	; 0x01
 6c8:	9a 81       	ldd	r25, Y+2	; 0x02
 6ca:	99 df       	rcall	.-206    	; 0x5fe <linear_distance_mm>
}
 6cc:	0f 90       	pop	r0
 6ce:	0f 90       	pop	r0
 6d0:	df 91       	pop	r29
 6d2:	cf 91       	pop	r28
 6d4:	08 95       	ret

000006d6 <back_mm>:

void back_mm(unsigned int DistanceInMM)
{
 6d6:	cf 93       	push	r28
 6d8:	df 93       	push	r29
 6da:	1f 92       	push	r1
 6dc:	1f 92       	push	r1
 6de:	cd b7       	in	r28, 0x3d	; 61
 6e0:	de b7       	in	r29, 0x3e	; 62
 6e2:	9a 83       	std	Y+2, r25	; 0x02
 6e4:	89 83       	std	Y+1, r24	; 0x01
	back();
 6e6:	5c df       	rcall	.-328    	; 0x5a0 <back>
	linear_distance_mm(DistanceInMM);
 6e8:	89 81       	ldd	r24, Y+1	; 0x01
 6ea:	9a 81       	ldd	r25, Y+2	; 0x02
 6ec:	88 df       	rcall	.-240    	; 0x5fe <linear_distance_mm>
}
 6ee:	0f 90       	pop	r0
 6f0:	0f 90       	pop	r0
 6f2:	df 91       	pop	r29
 6f4:	cf 91       	pop	r28
 6f6:	08 95       	ret

000006f8 <__vector_51>:

//SIGNAL(SIG_USART2_RECV) 		// ISR for receive complete interrupt
ISR(USART2_RX_vect)
{
 6f8:	1f 92       	push	r1
 6fa:	0f 92       	push	r0
 6fc:	00 90 5f 00 	lds	r0, 0x005F
 700:	0f 92       	push	r0
 702:	11 24       	eor	r1, r1
 704:	00 90 5b 00 	lds	r0, 0x005B
 708:	0f 92       	push	r0
 70a:	2f 93       	push	r18
 70c:	3f 93       	push	r19
 70e:	8f 93       	push	r24
 710:	9f 93       	push	r25
 712:	ef 93       	push	r30
 714:	ff 93       	push	r31
 716:	cf 93       	push	r28
 718:	df 93       	push	r29
 71a:	cd b7       	in	r28, 0x3d	; 61
 71c:	de b7       	in	r29, 0x3e	; 62
	rec_data = UDR2; 				//making copy of data from UDR2 in 'data' variable
 71e:	86 ed       	ldi	r24, 0xD6	; 214
 720:	90 e0       	ldi	r25, 0x00	; 0
 722:	fc 01       	movw	r30, r24
 724:	80 81       	ld	r24, Z
 726:	80 93 00 02 	sts	0x0200, r24

	while(!(UCSR2A && (1<<RXC2)));	// wait till data byte is received
 72a:	00 00       	nop
 72c:	80 ed       	ldi	r24, 0xD0	; 208
 72e:	90 e0       	ldi	r25, 0x00	; 0
 730:	fc 01       	movw	r30, r24
 732:	80 81       	ld	r24, Z
 734:	88 23       	and	r24, r24
 736:	d1 f3       	breq	.-12     	; 0x72c <__vector_51+0x34>
	
	if (data_packet_received == 0) 
 738:	80 91 36 02 	lds	r24, 0x0236
 73c:	88 23       	and	r24, r24
 73e:	09 f0       	breq	.+2      	; 0x742 <__vector_51+0x4a>
 740:	74 c0       	rjmp	.+232    	; 0x82a <__vector_51+0x132>
	{
		if (rec_data == '\n' )			// '\n' decimal value is 10
 742:	80 91 00 02 	lds	r24, 0x0200
 746:	8a 30       	cpi	r24, 0x0A	; 10
 748:	99 f4       	brne	.+38     	; 0x770 <__vector_51+0x78>
		{
			 //state = _second_last_byte 
			uart_data_buff[i] = rec_data;
 74a:	80 91 34 02 	lds	r24, 0x0234
 74e:	88 2f       	mov	r24, r24
 750:	90 e0       	ldi	r25, 0x00	; 0
 752:	20 91 00 02 	lds	r18, 0x0200
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	9d 4f       	sbci	r25, 0xFD	; 253
 75a:	fc 01       	movw	r30, r24
 75c:	20 83       	st	Z, r18
			i++;
 75e:	80 91 34 02 	lds	r24, 0x0234
 762:	8f 5f       	subi	r24, 0xFF	; 255
 764:	80 93 34 02 	sts	0x0234, r24
			end_char_rec = 1;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	80 93 33 02 	sts	0x0233, r24
 76e:	5d c0       	rjmp	.+186    	; 0x82a <__vector_51+0x132>
		//	UDR2 = rec_data;
		}

		else 
		{
			if((end_char_rec == 1) && (rec_data == '\r'))		//'\r' indicates end of transmission. It should come after '\n'
 770:	80 91 33 02 	lds	r24, 0x0233
 774:	81 30       	cpi	r24, 0x01	; 1
 776:	09 f0       	breq	.+2      	; 0x77a <__vector_51+0x82>
 778:	40 c0       	rjmp	.+128    	; 0x7fa <__vector_51+0x102>
 77a:	80 91 00 02 	lds	r24, 0x0200
 77e:	8d 30       	cpi	r24, 0x0D	; 13
 780:	e1 f5       	brne	.+120    	; 0x7fa <__vector_51+0x102>
			{
				uart_data_buff[i] = rec_data;
 782:	80 91 34 02 	lds	r24, 0x0234
 786:	88 2f       	mov	r24, r24
 788:	90 e0       	ldi	r25, 0x00	; 0
 78a:	20 91 00 02 	lds	r18, 0x0200
 78e:	8f 5f       	subi	r24, 0xFF	; 255
 790:	9d 4f       	sbci	r25, 0xFD	; 253
 792:	fc 01       	movw	r30, r24
 794:	20 83       	st	Z, r18
				i++;
 796:	80 91 34 02 	lds	r24, 0x0234
 79a:	8f 5f       	subi	r24, 0xFF	; 255
 79c:	80 93 34 02 	sts	0x0234, r24
				end_char_rec = 2;
 7a0:	82 e0       	ldi	r24, 0x02	; 2
 7a2:	80 93 33 02 	sts	0x0233, r24
				data_packet_received = 1;
 7a6:	81 e0       	ldi	r24, 0x01	; 1
 7a8:	80 93 36 02 	sts	0x0236, r24
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
 7ac:	10 92 35 02 	sts	0x0235, r1
 7b0:	1d c0       	rjmp	.+58     	; 0x7ec <__vector_51+0xf4>
				{
					copy_packet_data[j] = uart_data_buff[j];
 7b2:	80 91 35 02 	lds	r24, 0x0235
 7b6:	88 2f       	mov	r24, r24
 7b8:	90 e0       	ldi	r25, 0x00	; 0
 7ba:	20 91 35 02 	lds	r18, 0x0235
 7be:	22 2f       	mov	r18, r18
 7c0:	30 e0       	ldi	r19, 0x00	; 0
 7c2:	2f 5f       	subi	r18, 0xFF	; 255
 7c4:	3d 4f       	sbci	r19, 0xFD	; 253
 7c6:	f9 01       	movw	r30, r18
 7c8:	20 81       	ld	r18, Z
 7ca:	86 5e       	subi	r24, 0xE6	; 230
 7cc:	9d 4f       	sbci	r25, 0xFD	; 253
 7ce:	fc 01       	movw	r30, r24
 7d0:	20 83       	st	Z, r18
					//UDR2 = copy_packet_data[j];
					uart_data_buff[j] = 0;
 7d2:	80 91 35 02 	lds	r24, 0x0235
 7d6:	88 2f       	mov	r24, r24
 7d8:	90 e0       	ldi	r25, 0x00	; 0
 7da:	8f 5f       	subi	r24, 0xFF	; 255
 7dc:	9d 4f       	sbci	r25, 0xFD	; 253
 7de:	fc 01       	movw	r30, r24
 7e0:	10 82       	st	Z, r1
				uart_data_buff[i] = rec_data;
				i++;
				end_char_rec = 2;
				data_packet_received = 1;
				
				for (j = 0;j<i;j++)				// i value is stored in ISR
 7e2:	80 91 35 02 	lds	r24, 0x0235
 7e6:	8f 5f       	subi	r24, 0xFF	; 255
 7e8:	80 93 35 02 	sts	0x0235, r24
 7ec:	90 91 35 02 	lds	r25, 0x0235
 7f0:	80 91 34 02 	lds	r24, 0x0234
 7f4:	98 17       	cp	r25, r24
 7f6:	e8 f2       	brcs	.-70     	; 0x7b2 <__vector_51+0xba>
		//	UDR2 = rec_data;
		}

		else 
		{
			if((end_char_rec == 1) && (rec_data == '\r'))		//'\r' indicates end of transmission. It should come after '\n'
 7f8:	18 c0       	rjmp	.+48     	; 0x82a <__vector_51+0x132>
					uart_data_buff[j] = 0;
				}
			//	UDR2 = rec_data;
			}
	
			else if((end_char_rec == 1) && (rec_data != '\r'))		//'\r' is expected after '\n'. If not received, discard the data. 
 7fa:	80 91 33 02 	lds	r24, 0x0233
 7fe:	81 30       	cpi	r24, 0x01	; 1
 800:	29 f4       	brne	.+10     	; 0x80c <__vector_51+0x114>
 802:	80 91 00 02 	lds	r24, 0x0200
 806:	8d 30       	cpi	r24, 0x0D	; 13
 808:	09 f0       	breq	.+2      	; 0x80c <__vector_51+0x114>
 80a:	0f c0       	rjmp	.+30     	; 0x82a <__vector_51+0x132>
																	// discard the data and check 
			}
		
			else													// store other data bytes
			{
				uart_data_buff[i] = rec_data;
 80c:	80 91 34 02 	lds	r24, 0x0234
 810:	88 2f       	mov	r24, r24
 812:	90 e0       	ldi	r25, 0x00	; 0
 814:	20 91 00 02 	lds	r18, 0x0200
 818:	8f 5f       	subi	r24, 0xFF	; 255
 81a:	9d 4f       	sbci	r25, 0xFD	; 253
 81c:	fc 01       	movw	r30, r24
 81e:	20 83       	st	Z, r18
				i++;
 820:	80 91 34 02 	lds	r24, 0x0234
 824:	8f 5f       	subi	r24, 0xFF	; 255
 826:	80 93 34 02 	sts	0x0234, r24
				velocity(left,right);
				break;
			}
		} */
	
}	// end of ISR
 82a:	df 91       	pop	r29
 82c:	cf 91       	pop	r28
 82e:	ff 91       	pop	r31
 830:	ef 91       	pop	r30
 832:	9f 91       	pop	r25
 834:	8f 91       	pop	r24
 836:	3f 91       	pop	r19
 838:	2f 91       	pop	r18
 83a:	0f 90       	pop	r0
 83c:	00 92 5b 00 	sts	0x005B, r0
 840:	0f 90       	pop	r0
 842:	00 92 5f 00 	sts	0x005F, r0
 846:	0f 90       	pop	r0
 848:	1f 90       	pop	r1
 84a:	18 95       	reti

0000084c <send_sensor_data>:

void send_sensor_data(void)
{
 84c:	0f 93       	push	r16
 84e:	1f 93       	push	r17
 850:	cf 93       	push	r28
 852:	df 93       	push	r29
 854:	cd b7       	in	r28, 0x3d	; 61
 856:	de b7       	in	r29, 0x3e	; 62
	if (device_id == 0x00)
 858:	80 91 38 02 	lds	r24, 0x0238
 85c:	88 23       	and	r24, r24
 85e:	31 f4       	brne	.+12     	; 0x86c <send_sensor_data+0x20>
	{
		UDR2 = ADC_Conversion(0);		// Battery Voltage
 860:	06 ed       	ldi	r16, 0xD6	; 214
 862:	10 e0       	ldi	r17, 0x00	; 0
 864:	80 e0       	ldi	r24, 0x00	; 0
 866:	03 de       	rcall	.-1018   	; 0x46e <ADC_Conversion>
 868:	f8 01       	movw	r30, r16
 86a:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x01)
 86c:	80 91 38 02 	lds	r24, 0x0238
 870:	81 30       	cpi	r24, 0x01	; 1
 872:	31 f4       	brne	.+12     	; 0x880 <send_sensor_data+0x34>
	{
		UDR2 = ADC_Conversion(1);		// right WL sensor
 874:	06 ed       	ldi	r16, 0xD6	; 214
 876:	10 e0       	ldi	r17, 0x00	; 0
 878:	81 e0       	ldi	r24, 0x01	; 1
 87a:	f9 dd       	rcall	.-1038   	; 0x46e <ADC_Conversion>
 87c:	f8 01       	movw	r30, r16
 87e:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x02)
 880:	80 91 38 02 	lds	r24, 0x0238
 884:	82 30       	cpi	r24, 0x02	; 2
 886:	31 f4       	brne	.+12     	; 0x894 <send_sensor_data+0x48>
	{
		UDR2 = ADC_Conversion(2);		// Center WL sensor
 888:	06 ed       	ldi	r16, 0xD6	; 214
 88a:	10 e0       	ldi	r17, 0x00	; 0
 88c:	82 e0       	ldi	r24, 0x02	; 2
 88e:	ef dd       	rcall	.-1058   	; 0x46e <ADC_Conversion>
 890:	f8 01       	movw	r30, r16
 892:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x03)
 894:	80 91 38 02 	lds	r24, 0x0238
 898:	83 30       	cpi	r24, 0x03	; 3
 89a:	31 f4       	brne	.+12     	; 0x8a8 <send_sensor_data+0x5c>
	{
		UDR2 = ADC_Conversion(3);		// left WL sensor
 89c:	06 ed       	ldi	r16, 0xD6	; 214
 89e:	10 e0       	ldi	r17, 0x00	; 0
 8a0:	83 e0       	ldi	r24, 0x03	; 3
 8a2:	e5 dd       	rcall	.-1078   	; 0x46e <ADC_Conversion>
 8a4:	f8 01       	movw	r30, r16
 8a6:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x04)
 8a8:	80 91 38 02 	lds	r24, 0x0238
 8ac:	84 30       	cpi	r24, 0x04	; 4
 8ae:	31 f4       	brne	.+12     	; 0x8bc <send_sensor_data+0x70>
	{
		UDR2 = ADC_Conversion(4);		// IR Proximity sensor-1
 8b0:	06 ed       	ldi	r16, 0xD6	; 214
 8b2:	10 e0       	ldi	r17, 0x00	; 0
 8b4:	84 e0       	ldi	r24, 0x04	; 4
 8b6:	db dd       	rcall	.-1098   	; 0x46e <ADC_Conversion>
 8b8:	f8 01       	movw	r30, r16
 8ba:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x05)
 8bc:	80 91 38 02 	lds	r24, 0x0238
 8c0:	85 30       	cpi	r24, 0x05	; 5
 8c2:	31 f4       	brne	.+12     	; 0x8d0 <send_sensor_data+0x84>
	{
		UDR2 = ADC_Conversion(5);		// IR Proximity sensor-2
 8c4:	06 ed       	ldi	r16, 0xD6	; 214
 8c6:	10 e0       	ldi	r17, 0x00	; 0
 8c8:	85 e0       	ldi	r24, 0x05	; 5
 8ca:	d1 dd       	rcall	.-1118   	; 0x46e <ADC_Conversion>
 8cc:	f8 01       	movw	r30, r16
 8ce:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x06)
 8d0:	80 91 38 02 	lds	r24, 0x0238
 8d4:	86 30       	cpi	r24, 0x06	; 6
 8d6:	31 f4       	brne	.+12     	; 0x8e4 <send_sensor_data+0x98>
	{
		UDR2 = ADC_Conversion(6);		// IR Proximity sensor-3
 8d8:	06 ed       	ldi	r16, 0xD6	; 214
 8da:	10 e0       	ldi	r17, 0x00	; 0
 8dc:	86 e0       	ldi	r24, 0x06	; 6
 8de:	c7 dd       	rcall	.-1138   	; 0x46e <ADC_Conversion>
 8e0:	f8 01       	movw	r30, r16
 8e2:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x07)
 8e4:	80 91 38 02 	lds	r24, 0x0238
 8e8:	87 30       	cpi	r24, 0x07	; 7
 8ea:	31 f4       	brne	.+12     	; 0x8f8 <send_sensor_data+0xac>
	{
		UDR2 = ADC_Conversion(7);		// IR Proximity sensor-4
 8ec:	06 ed       	ldi	r16, 0xD6	; 214
 8ee:	10 e0       	ldi	r17, 0x00	; 0
 8f0:	87 e0       	ldi	r24, 0x07	; 7
 8f2:	bd dd       	rcall	.-1158   	; 0x46e <ADC_Conversion>
 8f4:	f8 01       	movw	r30, r16
 8f6:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x08)
 8f8:	80 91 38 02 	lds	r24, 0x0238
 8fc:	88 30       	cpi	r24, 0x08	; 8
 8fe:	31 f4       	brne	.+12     	; 0x90c <send_sensor_data+0xc0>
	{
		UDR2 = ADC_Conversion(8);		// IR Proximity sensor-5
 900:	06 ed       	ldi	r16, 0xD6	; 214
 902:	10 e0       	ldi	r17, 0x00	; 0
 904:	88 e0       	ldi	r24, 0x08	; 8
 906:	b3 dd       	rcall	.-1178   	; 0x46e <ADC_Conversion>
 908:	f8 01       	movw	r30, r16
 90a:	80 83       	st	Z, r24
	}
	
	if (device_id == 0x09)
 90c:	80 91 38 02 	lds	r24, 0x0238
 910:	89 30       	cpi	r24, 0x09	; 9
 912:	31 f4       	brne	.+12     	; 0x920 <send_sensor_data+0xd4>
	{
		UDR2 = ADC_Conversion(9);		// Sharp Sensor-1 
 914:	06 ed       	ldi	r16, 0xD6	; 214
 916:	10 e0       	ldi	r17, 0x00	; 0
 918:	89 e0       	ldi	r24, 0x09	; 9
 91a:	a9 dd       	rcall	.-1198   	; 0x46e <ADC_Conversion>
 91c:	f8 01       	movw	r30, r16
 91e:	80 83       	st	Z, r24
	}

	if (device_id == 0x0A)
 920:	80 91 38 02 	lds	r24, 0x0238
 924:	8a 30       	cpi	r24, 0x0A	; 10
 926:	31 f4       	brne	.+12     	; 0x934 <send_sensor_data+0xe8>
	{
		UDR2 = ADC_Conversion(10);		// Sharp Sensor-2
 928:	06 ed       	ldi	r16, 0xD6	; 214
 92a:	10 e0       	ldi	r17, 0x00	; 0
 92c:	8a e0       	ldi	r24, 0x0A	; 10
 92e:	9f dd       	rcall	.-1218   	; 0x46e <ADC_Conversion>
 930:	f8 01       	movw	r30, r16
 932:	80 83       	st	Z, r24
	}

	if (device_id == 0x0B)
 934:	80 91 38 02 	lds	r24, 0x0238
 938:	8b 30       	cpi	r24, 0x0B	; 11
 93a:	31 f4       	brne	.+12     	; 0x948 <send_sensor_data+0xfc>
	{
		UDR2 = ADC_Conversion(11);		// Sharp Sensor-3
 93c:	06 ed       	ldi	r16, 0xD6	; 214
 93e:	10 e0       	ldi	r17, 0x00	; 0
 940:	8b e0       	ldi	r24, 0x0B	; 11
 942:	95 dd       	rcall	.-1238   	; 0x46e <ADC_Conversion>
 944:	f8 01       	movw	r30, r16
 946:	80 83       	st	Z, r24
	}

	if (device_id == 0x0C)
 948:	80 91 38 02 	lds	r24, 0x0238
 94c:	8c 30       	cpi	r24, 0x0C	; 12
 94e:	31 f4       	brne	.+12     	; 0x95c <send_sensor_data+0x110>
	{
		UDR2 = ADC_Conversion(12);		// Sharp Sensor-4
 950:	06 ed       	ldi	r16, 0xD6	; 214
 952:	10 e0       	ldi	r17, 0x00	; 0
 954:	8c e0       	ldi	r24, 0x0C	; 12
 956:	8b dd       	rcall	.-1258   	; 0x46e <ADC_Conversion>
 958:	f8 01       	movw	r30, r16
 95a:	80 83       	st	Z, r24
	}

	if (device_id == 0x0D)
 95c:	80 91 38 02 	lds	r24, 0x0238
 960:	8d 30       	cpi	r24, 0x0D	; 13
 962:	31 f4       	brne	.+12     	; 0x970 <send_sensor_data+0x124>
	{
		UDR2 = ADC_Conversion(13);		// Sharp Sensor-5
 964:	06 ed       	ldi	r16, 0xD6	; 214
 966:	10 e0       	ldi	r17, 0x00	; 0
 968:	8d e0       	ldi	r24, 0x0D	; 13
 96a:	81 dd       	rcall	.-1278   	; 0x46e <ADC_Conversion>
 96c:	f8 01       	movw	r30, r16
 96e:	80 83       	st	Z, r24
	}

	if (device_id == 0x0E)
 970:	80 91 38 02 	lds	r24, 0x0238
 974:	8e 30       	cpi	r24, 0x0E	; 14
 976:	31 f4       	brne	.+12     	; 0x984 <send_sensor_data+0x138>
	{
		UDR2 = ADC_Conversion(14);		// Connected to servo pod
 978:	06 ed       	ldi	r16, 0xD6	; 214
 97a:	10 e0       	ldi	r17, 0x00	; 0
 97c:	8e e0       	ldi	r24, 0x0E	; 14
 97e:	77 dd       	rcall	.-1298   	; 0x46e <ADC_Conversion>
 980:	f8 01       	movw	r30, r16
 982:	80 83       	st	Z, r24
	}

	if (device_id == 0x0E)
 984:	80 91 38 02 	lds	r24, 0x0238
 988:	8e 30       	cpi	r24, 0x0E	; 14
 98a:	31 f4       	brne	.+12     	; 0x998 <send_sensor_data+0x14c>
	{
		UDR2 = ADC_Conversion(15);		// Connected to servo pod
 98c:	06 ed       	ldi	r16, 0xD6	; 214
 98e:	10 e0       	ldi	r17, 0x00	; 0
 990:	8f e0       	ldi	r24, 0x0F	; 15
 992:	6d dd       	rcall	.-1318   	; 0x46e <ADC_Conversion>
 994:	f8 01       	movw	r30, r16
 996:	80 83       	st	Z, r24
	}	
}
 998:	df 91       	pop	r29
 99a:	cf 91       	pop	r28
 99c:	1f 91       	pop	r17
 99e:	0f 91       	pop	r16
 9a0:	08 95       	ret

000009a2 <actuate_devices>:

void actuate_devices(void)
{
 9a2:	cf 93       	push	r28
 9a4:	df 93       	push	r29
 9a6:	cd b7       	in	r28, 0x3d	; 61
 9a8:	de b7       	in	r29, 0x3e	; 62
	if (device_id == 0x01)				// Buzzer has device id = 1
 9aa:	80 91 38 02 	lds	r24, 0x0238
 9ae:	81 30       	cpi	r24, 0x01	; 1
 9b0:	59 f4       	brne	.+22     	; 0x9c8 <actuate_devices+0x26>
	{
		if (function_type == 0x00)
 9b2:	80 91 3a 02 	lds	r24, 0x023A
 9b6:	88 23       	and	r24, r24
 9b8:	11 f4       	brne	.+4      	; 0x9be <actuate_devices+0x1c>
		{
			buzzer_on();
 9ba:	c6 dd       	rcall	.-1140   	; 0x548 <buzzer_on>
 9bc:	05 c0       	rjmp	.+10     	; 0x9c8 <actuate_devices+0x26>
		}
		else if (function_type == 0x01)
 9be:	80 91 3a 02 	lds	r24, 0x023A
 9c2:	81 30       	cpi	r24, 0x01	; 1
 9c4:	09 f4       	brne	.+2      	; 0x9c8 <actuate_devices+0x26>
		{
			buzzer_off();
 9c6:	d0 dd       	rcall	.-1120   	; 0x568 <buzzer_off>
		}
	}
	
	if (device_id == 0x02)				// Motor has device id = 2
 9c8:	80 91 38 02 	lds	r24, 0x0238
 9cc:	82 30       	cpi	r24, 0x02	; 2
 9ce:	71 f5       	brne	.+92     	; 0xa2c <actuate_devices+0x8a>
	{
		if (function_type == 0x00)
 9d0:	80 91 3a 02 	lds	r24, 0x023A
 9d4:	88 23       	and	r24, r24
 9d6:	19 f4       	brne	.+6      	; 0x9de <actuate_devices+0x3c>
		{
			motor_enable();
 9d8:	a7 dd       	rcall	.-1202   	; 0x528 <motor_enable>
			forward();
 9da:	d6 dd       	rcall	.-1108   	; 0x588 <forward>
 9dc:	27 c0       	rjmp	.+78     	; 0xa2c <actuate_devices+0x8a>
		}
		else if (function_type == 0x01)
 9de:	80 91 3a 02 	lds	r24, 0x023A
 9e2:	81 30       	cpi	r24, 0x01	; 1
 9e4:	19 f4       	brne	.+6      	; 0x9ec <actuate_devices+0x4a>
		{
			motor_enable();
 9e6:	a0 dd       	rcall	.-1216   	; 0x528 <motor_enable>
			back();
 9e8:	db dd       	rcall	.-1098   	; 0x5a0 <back>
 9ea:	20 c0       	rjmp	.+64     	; 0xa2c <actuate_devices+0x8a>
		}
		else if (function_type == 0x02)
 9ec:	80 91 3a 02 	lds	r24, 0x023A
 9f0:	82 30       	cpi	r24, 0x02	; 2
 9f2:	19 f4       	brne	.+6      	; 0x9fa <actuate_devices+0x58>
		{
			motor_enable();
 9f4:	99 dd       	rcall	.-1230   	; 0x528 <motor_enable>
			right();
 9f6:	ec dd       	rcall	.-1064   	; 0x5d0 <right>
 9f8:	19 c0       	rjmp	.+50     	; 0xa2c <actuate_devices+0x8a>
		}
		else if (function_type == 0x03)
 9fa:	80 91 3a 02 	lds	r24, 0x023A
 9fe:	83 30       	cpi	r24, 0x03	; 3
 a00:	19 f4       	brne	.+6      	; 0xa08 <actuate_devices+0x66>
		{
			motor_enable();
 a02:	92 dd       	rcall	.-1244   	; 0x528 <motor_enable>
			left();
 a04:	d9 dd       	rcall	.-1102   	; 0x5b8 <left>
 a06:	12 c0       	rjmp	.+36     	; 0xa2c <actuate_devices+0x8a>
		}
		else if (function_type == 0x04)
 a08:	80 91 3a 02 	lds	r24, 0x023A
 a0c:	84 30       	cpi	r24, 0x04	; 4
 a0e:	19 f4       	brne	.+6      	; 0xa16 <actuate_devices+0x74>
		{
			motor_enable();
 a10:	8b dd       	rcall	.-1258   	; 0x528 <motor_enable>
			stop();
 a12:	ea dd       	rcall	.-1068   	; 0x5e8 <stop>
 a14:	0b c0       	rjmp	.+22     	; 0xa2c <actuate_devices+0x8a>
		}
		else if (function_type == 0x09)
 a16:	80 91 3a 02 	lds	r24, 0x023A
 a1a:	89 30       	cpi	r24, 0x09	; 9
 a1c:	39 f4       	brne	.+14     	; 0xa2c <actuate_devices+0x8a>
		{
			forward();
 a1e:	b4 dd       	rcall	.-1176   	; 0x588 <forward>
			//UDR2 = param_1;
			velocity(param_1,param_2);
 a20:	90 91 3d 02 	lds	r25, 0x023D
 a24:	80 91 3c 02 	lds	r24, 0x023C
 a28:	69 2f       	mov	r22, r25
 a2a:	67 dd       	rcall	.-1330   	; 0x4fa <velocity>
			
		}	
	}
	if (device_id == 0x03)				// position encoder
 a2c:	80 91 38 02 	lds	r24, 0x0238
 a30:	83 30       	cpi	r24, 0x03	; 3
 a32:	91 f4       	brne	.+36     	; 0xa58 <actuate_devices+0xb6>
	{
		if (function_type == 0x00)
 a34:	80 91 3a 02 	lds	r24, 0x023A
 a38:	88 23       	and	r24, r24
 a3a:	29 f4       	brne	.+10     	; 0xa46 <actuate_devices+0xa4>
		{
			forward_mm(param_1);
 a3c:	80 91 3c 02 	lds	r24, 0x023C
 a40:	88 2f       	mov	r24, r24
 a42:	90 e0       	ldi	r25, 0x00	; 0
 a44:	37 de       	rcall	.-914    	; 0x6b4 <forward_mm>
		}
		
		if (function_type == 0x01 )
 a46:	80 91 3a 02 	lds	r24, 0x023A
 a4a:	81 30       	cpi	r24, 0x01	; 1
 a4c:	29 f4       	brne	.+10     	; 0xa58 <actuate_devices+0xb6>
		{
			back_mm(param_1);
 a4e:	80 91 3c 02 	lds	r24, 0x023C
 a52:	88 2f       	mov	r24, r24
 a54:	90 e0       	ldi	r25, 0x00	; 0
 a56:	3f de       	rcall	.-898    	; 0x6d6 <back_mm>
		}
	}
}
 a58:	df 91       	pop	r29
 a5a:	cf 91       	pop	r28
 a5c:	08 95       	ret

00000a5e <decode_data>:

void decode_data(void)
{
 a5e:	cf 93       	push	r28
 a60:	df 93       	push	r29
 a62:	cd b7       	in	r28, 0x3d	; 61
 a64:	de b7       	in	r29, 0x3e	; 62
	while (data_copied == 1)
 a66:	1a c0       	rjmp	.+52     	; 0xa9c <decode_data+0x3e>
	{
		device_id = copy_packet_data[0];
 a68:	80 91 1a 02 	lds	r24, 0x021A
 a6c:	80 93 38 02 	sts	0x0238, r24
		device_type = copy_packet_data[1];
 a70:	80 91 1b 02 	lds	r24, 0x021B
 a74:	80 93 39 02 	sts	0x0239, r24
		function_type = copy_packet_data[2];
 a78:	80 91 1c 02 	lds	r24, 0x021C
 a7c:	80 93 3a 02 	sts	0x023A, r24
		param_count = copy_packet_data[3];
 a80:	80 91 1d 02 	lds	r24, 0x021D
 a84:	80 93 3b 02 	sts	0x023B, r24
		param_1 = copy_packet_data[4];
 a88:	80 91 1e 02 	lds	r24, 0x021E
 a8c:	80 93 3c 02 	sts	0x023C, r24
		param_2 = copy_packet_data[5];
 a90:	80 91 1f 02 	lds	r24, 0x021F
 a94:	80 93 3d 02 	sts	0x023D, r24
		data_copied = 0;
 a98:	10 92 37 02 	sts	0x0237, r1
	}
}

void decode_data(void)
{
	while (data_copied == 1)
 a9c:	80 91 37 02 	lds	r24, 0x0237
 aa0:	81 30       	cpi	r24, 0x01	; 1
 aa2:	11 f3       	breq	.-60     	; 0xa68 <decode_data+0xa>
		param_2 = copy_packet_data[5];
		data_copied = 0;
	//	UDR2 = 'D';
	}
	
	if ((data_copied == 0) && (device_type == 0x00))	// input devices such as sensors, which will send back data
 aa4:	80 91 37 02 	lds	r24, 0x0237
 aa8:	88 23       	and	r24, r24
 aaa:	31 f4       	brne	.+12     	; 0xab8 <decode_data+0x5a>
 aac:	80 91 39 02 	lds	r24, 0x0239
 ab0:	88 23       	and	r24, r24
 ab2:	11 f4       	brne	.+4      	; 0xab8 <decode_data+0x5a>
	{
		send_sensor_data();
 ab4:	cb de       	rcall	.-618    	; 0x84c <send_sensor_data>
 ab6:	09 c0       	rjmp	.+18     	; 0xaca <decode_data+0x6c>
	}
	
	else if ((data_copied == 0) && (device_type == 0x01)) // output devices such as buzzer, motors
 ab8:	80 91 37 02 	lds	r24, 0x0237
 abc:	88 23       	and	r24, r24
 abe:	29 f4       	brne	.+10     	; 0xaca <decode_data+0x6c>
 ac0:	80 91 39 02 	lds	r24, 0x0239
 ac4:	81 30       	cpi	r24, 0x01	; 1
 ac6:	09 f4       	brne	.+2      	; 0xaca <decode_data+0x6c>
	{
	//	UDR2 = 'A';
		actuate_devices();
 ac8:	6c df       	rcall	.-296    	; 0x9a2 <actuate_devices>
	}
}
 aca:	df 91       	pop	r29
 acc:	cf 91       	pop	r28
 ace:	08 95       	ret

00000ad0 <copy_data_packet>:

void copy_data_packet()
{
 ad0:	cf 93       	push	r28
 ad2:	df 93       	push	r29
 ad4:	cd b7       	in	r28, 0x3d	; 61
 ad6:	de b7       	in	r29, 0x3e	; 62
	if (data_packet_received == 1)
 ad8:	80 91 36 02 	lds	r24, 0x0236
 adc:	81 30       	cpi	r24, 0x01	; 1
 ade:	61 f4       	brne	.+24     	; 0xaf8 <copy_data_packet+0x28>
		//{
			//copy_packet_data[j] = uart_data_buff[j];
			////UDR2 = copy_packet_data[j];
			//uart_data_buff[j] = 0;
		//}
		i=0;
 ae0:	10 92 34 02 	sts	0x0234, r1
		j=0;
 ae4:	10 92 35 02 	sts	0x0235, r1
		data_packet_received = 0;
 ae8:	10 92 36 02 	sts	0x0236, r1
		end_char_rec = 0;
 aec:	10 92 33 02 	sts	0x0233, r1
		data_copied = 1;
 af0:	81 e0       	ldi	r24, 0x01	; 1
 af2:	80 93 37 02 	sts	0x0237, r24
		
	//	UDR2 = data_copied;
		decode_data();
 af6:	b3 df       	rcall	.-154    	; 0xa5e <decode_data>
		//UDR2 = 'I';
		//_delay_ms(1000);
	}
	//UDR2 = 'O';
	
}
 af8:	df 91       	pop	r29
 afa:	cf 91       	pop	r28
 afc:	08 95       	ret

00000afe <main>:



//Main Function
int main(void)
{
 afe:	cf 93       	push	r28
 b00:	df 93       	push	r29
 b02:	cd b7       	in	r28, 0x3d	; 61
 b04:	de b7       	in	r29, 0x3e	; 62
	init_devices();
 b06:	a4 dc       	rcall	.-1720   	; 0x450 <init_devices>
	while(1)
	{
		copy_data_packet();
 b08:	e3 df       	rcall	.-58     	; 0xad0 <copy_data_packet>
	}
 b0a:	fe cf       	rjmp	.-4      	; 0xb08 <main+0xa>

00000b0c <__divsf3>:
 b0c:	0c d0       	rcall	.+24     	; 0xb26 <__divsf3x>
 b0e:	e6 c0       	rjmp	.+460    	; 0xcdc <__fp_round>
 b10:	de d0       	rcall	.+444    	; 0xcce <__fp_pscB>
 b12:	40 f0       	brcs	.+16     	; 0xb24 <__divsf3+0x18>
 b14:	d5 d0       	rcall	.+426    	; 0xcc0 <__fp_pscA>
 b16:	30 f0       	brcs	.+12     	; 0xb24 <__divsf3+0x18>
 b18:	21 f4       	brne	.+8      	; 0xb22 <__divsf3+0x16>
 b1a:	5f 3f       	cpi	r21, 0xFF	; 255
 b1c:	19 f0       	breq	.+6      	; 0xb24 <__divsf3+0x18>
 b1e:	c7 c0       	rjmp	.+398    	; 0xcae <__fp_inf>
 b20:	51 11       	cpse	r21, r1
 b22:	10 c1       	rjmp	.+544    	; 0xd44 <__fp_szero>
 b24:	ca c0       	rjmp	.+404    	; 0xcba <__fp_nan>

00000b26 <__divsf3x>:
 b26:	eb d0       	rcall	.+470    	; 0xcfe <__fp_split3>
 b28:	98 f3       	brcs	.-26     	; 0xb10 <__divsf3+0x4>

00000b2a <__divsf3_pse>:
 b2a:	99 23       	and	r25, r25
 b2c:	c9 f3       	breq	.-14     	; 0xb20 <__divsf3+0x14>
 b2e:	55 23       	and	r21, r21
 b30:	b1 f3       	breq	.-20     	; 0xb1e <__divsf3+0x12>
 b32:	95 1b       	sub	r25, r21
 b34:	55 0b       	sbc	r21, r21
 b36:	bb 27       	eor	r27, r27
 b38:	aa 27       	eor	r26, r26
 b3a:	62 17       	cp	r22, r18
 b3c:	73 07       	cpc	r23, r19
 b3e:	84 07       	cpc	r24, r20
 b40:	38 f0       	brcs	.+14     	; 0xb50 <__divsf3_pse+0x26>
 b42:	9f 5f       	subi	r25, 0xFF	; 255
 b44:	5f 4f       	sbci	r21, 0xFF	; 255
 b46:	22 0f       	add	r18, r18
 b48:	33 1f       	adc	r19, r19
 b4a:	44 1f       	adc	r20, r20
 b4c:	aa 1f       	adc	r26, r26
 b4e:	a9 f3       	breq	.-22     	; 0xb3a <__divsf3_pse+0x10>
 b50:	33 d0       	rcall	.+102    	; 0xbb8 <__divsf3_pse+0x8e>
 b52:	0e 2e       	mov	r0, r30
 b54:	3a f0       	brmi	.+14     	; 0xb64 <__divsf3_pse+0x3a>
 b56:	e0 e8       	ldi	r30, 0x80	; 128
 b58:	30 d0       	rcall	.+96     	; 0xbba <__divsf3_pse+0x90>
 b5a:	91 50       	subi	r25, 0x01	; 1
 b5c:	50 40       	sbci	r21, 0x00	; 0
 b5e:	e6 95       	lsr	r30
 b60:	00 1c       	adc	r0, r0
 b62:	ca f7       	brpl	.-14     	; 0xb56 <__divsf3_pse+0x2c>
 b64:	29 d0       	rcall	.+82     	; 0xbb8 <__divsf3_pse+0x8e>
 b66:	fe 2f       	mov	r31, r30
 b68:	27 d0       	rcall	.+78     	; 0xbb8 <__divsf3_pse+0x8e>
 b6a:	66 0f       	add	r22, r22
 b6c:	77 1f       	adc	r23, r23
 b6e:	88 1f       	adc	r24, r24
 b70:	bb 1f       	adc	r27, r27
 b72:	26 17       	cp	r18, r22
 b74:	37 07       	cpc	r19, r23
 b76:	48 07       	cpc	r20, r24
 b78:	ab 07       	cpc	r26, r27
 b7a:	b0 e8       	ldi	r27, 0x80	; 128
 b7c:	09 f0       	breq	.+2      	; 0xb80 <__divsf3_pse+0x56>
 b7e:	bb 0b       	sbc	r27, r27
 b80:	80 2d       	mov	r24, r0
 b82:	bf 01       	movw	r22, r30
 b84:	ff 27       	eor	r31, r31
 b86:	93 58       	subi	r25, 0x83	; 131
 b88:	5f 4f       	sbci	r21, 0xFF	; 255
 b8a:	2a f0       	brmi	.+10     	; 0xb96 <__divsf3_pse+0x6c>
 b8c:	9e 3f       	cpi	r25, 0xFE	; 254
 b8e:	51 05       	cpc	r21, r1
 b90:	68 f0       	brcs	.+26     	; 0xbac <__divsf3_pse+0x82>
 b92:	8d c0       	rjmp	.+282    	; 0xcae <__fp_inf>
 b94:	d7 c0       	rjmp	.+430    	; 0xd44 <__fp_szero>
 b96:	5f 3f       	cpi	r21, 0xFF	; 255
 b98:	ec f3       	brlt	.-6      	; 0xb94 <__divsf3_pse+0x6a>
 b9a:	98 3e       	cpi	r25, 0xE8	; 232
 b9c:	dc f3       	brlt	.-10     	; 0xb94 <__divsf3_pse+0x6a>
 b9e:	86 95       	lsr	r24
 ba0:	77 95       	ror	r23
 ba2:	67 95       	ror	r22
 ba4:	b7 95       	ror	r27
 ba6:	f7 95       	ror	r31
 ba8:	9f 5f       	subi	r25, 0xFF	; 255
 baa:	c9 f7       	brne	.-14     	; 0xb9e <__divsf3_pse+0x74>
 bac:	88 0f       	add	r24, r24
 bae:	91 1d       	adc	r25, r1
 bb0:	96 95       	lsr	r25
 bb2:	87 95       	ror	r24
 bb4:	97 f9       	bld	r25, 7
 bb6:	08 95       	ret
 bb8:	e1 e0       	ldi	r30, 0x01	; 1
 bba:	66 0f       	add	r22, r22
 bbc:	77 1f       	adc	r23, r23
 bbe:	88 1f       	adc	r24, r24
 bc0:	bb 1f       	adc	r27, r27
 bc2:	62 17       	cp	r22, r18
 bc4:	73 07       	cpc	r23, r19
 bc6:	84 07       	cpc	r24, r20
 bc8:	ba 07       	cpc	r27, r26
 bca:	20 f0       	brcs	.+8      	; 0xbd4 <__divsf3_pse+0xaa>
 bcc:	62 1b       	sub	r22, r18
 bce:	73 0b       	sbc	r23, r19
 bd0:	84 0b       	sbc	r24, r20
 bd2:	ba 0b       	sbc	r27, r26
 bd4:	ee 1f       	adc	r30, r30
 bd6:	88 f7       	brcc	.-30     	; 0xbba <__divsf3_pse+0x90>
 bd8:	e0 95       	com	r30
 bda:	08 95       	ret

00000bdc <__fixunssfsi>:
 bdc:	98 d0       	rcall	.+304    	; 0xd0e <__fp_splitA>
 bde:	88 f0       	brcs	.+34     	; 0xc02 <__fixunssfsi+0x26>
 be0:	9f 57       	subi	r25, 0x7F	; 127
 be2:	90 f0       	brcs	.+36     	; 0xc08 <__fixunssfsi+0x2c>
 be4:	b9 2f       	mov	r27, r25
 be6:	99 27       	eor	r25, r25
 be8:	b7 51       	subi	r27, 0x17	; 23
 bea:	a0 f0       	brcs	.+40     	; 0xc14 <__fixunssfsi+0x38>
 bec:	d1 f0       	breq	.+52     	; 0xc22 <__fixunssfsi+0x46>
 bee:	66 0f       	add	r22, r22
 bf0:	77 1f       	adc	r23, r23
 bf2:	88 1f       	adc	r24, r24
 bf4:	99 1f       	adc	r25, r25
 bf6:	1a f0       	brmi	.+6      	; 0xbfe <__fixunssfsi+0x22>
 bf8:	ba 95       	dec	r27
 bfa:	c9 f7       	brne	.-14     	; 0xbee <__fixunssfsi+0x12>
 bfc:	12 c0       	rjmp	.+36     	; 0xc22 <__fixunssfsi+0x46>
 bfe:	b1 30       	cpi	r27, 0x01	; 1
 c00:	81 f0       	breq	.+32     	; 0xc22 <__fixunssfsi+0x46>
 c02:	9f d0       	rcall	.+318    	; 0xd42 <__fp_zero>
 c04:	b1 e0       	ldi	r27, 0x01	; 1
 c06:	08 95       	ret
 c08:	9c c0       	rjmp	.+312    	; 0xd42 <__fp_zero>
 c0a:	67 2f       	mov	r22, r23
 c0c:	78 2f       	mov	r23, r24
 c0e:	88 27       	eor	r24, r24
 c10:	b8 5f       	subi	r27, 0xF8	; 248
 c12:	39 f0       	breq	.+14     	; 0xc22 <__fixunssfsi+0x46>
 c14:	b9 3f       	cpi	r27, 0xF9	; 249
 c16:	cc f3       	brlt	.-14     	; 0xc0a <__fixunssfsi+0x2e>
 c18:	86 95       	lsr	r24
 c1a:	77 95       	ror	r23
 c1c:	67 95       	ror	r22
 c1e:	b3 95       	inc	r27
 c20:	d9 f7       	brne	.-10     	; 0xc18 <__fixunssfsi+0x3c>
 c22:	3e f4       	brtc	.+14     	; 0xc32 <__fixunssfsi+0x56>
 c24:	90 95       	com	r25
 c26:	80 95       	com	r24
 c28:	70 95       	com	r23
 c2a:	61 95       	neg	r22
 c2c:	7f 4f       	sbci	r23, 0xFF	; 255
 c2e:	8f 4f       	sbci	r24, 0xFF	; 255
 c30:	9f 4f       	sbci	r25, 0xFF	; 255
 c32:	08 95       	ret

00000c34 <__floatunsisf>:
 c34:	e8 94       	clt
 c36:	09 c0       	rjmp	.+18     	; 0xc4a <__floatsisf+0x12>

00000c38 <__floatsisf>:
 c38:	97 fb       	bst	r25, 7
 c3a:	3e f4       	brtc	.+14     	; 0xc4a <__floatsisf+0x12>
 c3c:	90 95       	com	r25
 c3e:	80 95       	com	r24
 c40:	70 95       	com	r23
 c42:	61 95       	neg	r22
 c44:	7f 4f       	sbci	r23, 0xFF	; 255
 c46:	8f 4f       	sbci	r24, 0xFF	; 255
 c48:	9f 4f       	sbci	r25, 0xFF	; 255
 c4a:	99 23       	and	r25, r25
 c4c:	a9 f0       	breq	.+42     	; 0xc78 <__floatsisf+0x40>
 c4e:	f9 2f       	mov	r31, r25
 c50:	96 e9       	ldi	r25, 0x96	; 150
 c52:	bb 27       	eor	r27, r27
 c54:	93 95       	inc	r25
 c56:	f6 95       	lsr	r31
 c58:	87 95       	ror	r24
 c5a:	77 95       	ror	r23
 c5c:	67 95       	ror	r22
 c5e:	b7 95       	ror	r27
 c60:	f1 11       	cpse	r31, r1
 c62:	f8 cf       	rjmp	.-16     	; 0xc54 <__floatsisf+0x1c>
 c64:	fa f4       	brpl	.+62     	; 0xca4 <__floatsisf+0x6c>
 c66:	bb 0f       	add	r27, r27
 c68:	11 f4       	brne	.+4      	; 0xc6e <__floatsisf+0x36>
 c6a:	60 ff       	sbrs	r22, 0
 c6c:	1b c0       	rjmp	.+54     	; 0xca4 <__floatsisf+0x6c>
 c6e:	6f 5f       	subi	r22, 0xFF	; 255
 c70:	7f 4f       	sbci	r23, 0xFF	; 255
 c72:	8f 4f       	sbci	r24, 0xFF	; 255
 c74:	9f 4f       	sbci	r25, 0xFF	; 255
 c76:	16 c0       	rjmp	.+44     	; 0xca4 <__floatsisf+0x6c>
 c78:	88 23       	and	r24, r24
 c7a:	11 f0       	breq	.+4      	; 0xc80 <__floatsisf+0x48>
 c7c:	96 e9       	ldi	r25, 0x96	; 150
 c7e:	11 c0       	rjmp	.+34     	; 0xca2 <__floatsisf+0x6a>
 c80:	77 23       	and	r23, r23
 c82:	21 f0       	breq	.+8      	; 0xc8c <__floatsisf+0x54>
 c84:	9e e8       	ldi	r25, 0x8E	; 142
 c86:	87 2f       	mov	r24, r23
 c88:	76 2f       	mov	r23, r22
 c8a:	05 c0       	rjmp	.+10     	; 0xc96 <__floatsisf+0x5e>
 c8c:	66 23       	and	r22, r22
 c8e:	71 f0       	breq	.+28     	; 0xcac <__floatsisf+0x74>
 c90:	96 e8       	ldi	r25, 0x86	; 134
 c92:	86 2f       	mov	r24, r22
 c94:	70 e0       	ldi	r23, 0x00	; 0
 c96:	60 e0       	ldi	r22, 0x00	; 0
 c98:	2a f0       	brmi	.+10     	; 0xca4 <__floatsisf+0x6c>
 c9a:	9a 95       	dec	r25
 c9c:	66 0f       	add	r22, r22
 c9e:	77 1f       	adc	r23, r23
 ca0:	88 1f       	adc	r24, r24
 ca2:	da f7       	brpl	.-10     	; 0xc9a <__floatsisf+0x62>
 ca4:	88 0f       	add	r24, r24
 ca6:	96 95       	lsr	r25
 ca8:	87 95       	ror	r24
 caa:	97 f9       	bld	r25, 7
 cac:	08 95       	ret

00000cae <__fp_inf>:
 cae:	97 f9       	bld	r25, 7
 cb0:	9f 67       	ori	r25, 0x7F	; 127
 cb2:	80 e8       	ldi	r24, 0x80	; 128
 cb4:	70 e0       	ldi	r23, 0x00	; 0
 cb6:	60 e0       	ldi	r22, 0x00	; 0
 cb8:	08 95       	ret

00000cba <__fp_nan>:
 cba:	9f ef       	ldi	r25, 0xFF	; 255
 cbc:	80 ec       	ldi	r24, 0xC0	; 192
 cbe:	08 95       	ret

00000cc0 <__fp_pscA>:
 cc0:	00 24       	eor	r0, r0
 cc2:	0a 94       	dec	r0
 cc4:	16 16       	cp	r1, r22
 cc6:	17 06       	cpc	r1, r23
 cc8:	18 06       	cpc	r1, r24
 cca:	09 06       	cpc	r0, r25
 ccc:	08 95       	ret

00000cce <__fp_pscB>:
 cce:	00 24       	eor	r0, r0
 cd0:	0a 94       	dec	r0
 cd2:	12 16       	cp	r1, r18
 cd4:	13 06       	cpc	r1, r19
 cd6:	14 06       	cpc	r1, r20
 cd8:	05 06       	cpc	r0, r21
 cda:	08 95       	ret

00000cdc <__fp_round>:
 cdc:	09 2e       	mov	r0, r25
 cde:	03 94       	inc	r0
 ce0:	00 0c       	add	r0, r0
 ce2:	11 f4       	brne	.+4      	; 0xce8 <__fp_round+0xc>
 ce4:	88 23       	and	r24, r24
 ce6:	52 f0       	brmi	.+20     	; 0xcfc <__fp_round+0x20>
 ce8:	bb 0f       	add	r27, r27
 cea:	40 f4       	brcc	.+16     	; 0xcfc <__fp_round+0x20>
 cec:	bf 2b       	or	r27, r31
 cee:	11 f4       	brne	.+4      	; 0xcf4 <__fp_round+0x18>
 cf0:	60 ff       	sbrs	r22, 0
 cf2:	04 c0       	rjmp	.+8      	; 0xcfc <__fp_round+0x20>
 cf4:	6f 5f       	subi	r22, 0xFF	; 255
 cf6:	7f 4f       	sbci	r23, 0xFF	; 255
 cf8:	8f 4f       	sbci	r24, 0xFF	; 255
 cfa:	9f 4f       	sbci	r25, 0xFF	; 255
 cfc:	08 95       	ret

00000cfe <__fp_split3>:
 cfe:	57 fd       	sbrc	r21, 7
 d00:	90 58       	subi	r25, 0x80	; 128
 d02:	44 0f       	add	r20, r20
 d04:	55 1f       	adc	r21, r21
 d06:	59 f0       	breq	.+22     	; 0xd1e <__fp_splitA+0x10>
 d08:	5f 3f       	cpi	r21, 0xFF	; 255
 d0a:	71 f0       	breq	.+28     	; 0xd28 <__fp_splitA+0x1a>
 d0c:	47 95       	ror	r20

00000d0e <__fp_splitA>:
 d0e:	88 0f       	add	r24, r24
 d10:	97 fb       	bst	r25, 7
 d12:	99 1f       	adc	r25, r25
 d14:	61 f0       	breq	.+24     	; 0xd2e <__fp_splitA+0x20>
 d16:	9f 3f       	cpi	r25, 0xFF	; 255
 d18:	79 f0       	breq	.+30     	; 0xd38 <__fp_splitA+0x2a>
 d1a:	87 95       	ror	r24
 d1c:	08 95       	ret
 d1e:	12 16       	cp	r1, r18
 d20:	13 06       	cpc	r1, r19
 d22:	14 06       	cpc	r1, r20
 d24:	55 1f       	adc	r21, r21
 d26:	f2 cf       	rjmp	.-28     	; 0xd0c <__fp_split3+0xe>
 d28:	46 95       	lsr	r20
 d2a:	f1 df       	rcall	.-30     	; 0xd0e <__fp_splitA>
 d2c:	08 c0       	rjmp	.+16     	; 0xd3e <__fp_splitA+0x30>
 d2e:	16 16       	cp	r1, r22
 d30:	17 06       	cpc	r1, r23
 d32:	18 06       	cpc	r1, r24
 d34:	99 1f       	adc	r25, r25
 d36:	f1 cf       	rjmp	.-30     	; 0xd1a <__fp_splitA+0xc>
 d38:	86 95       	lsr	r24
 d3a:	71 05       	cpc	r23, r1
 d3c:	61 05       	cpc	r22, r1
 d3e:	08 94       	sec
 d40:	08 95       	ret

00000d42 <__fp_zero>:
 d42:	e8 94       	clt

00000d44 <__fp_szero>:
 d44:	bb 27       	eor	r27, r27
 d46:	66 27       	eor	r22, r22
 d48:	77 27       	eor	r23, r23
 d4a:	cb 01       	movw	r24, r22
 d4c:	97 f9       	bld	r25, 7
 d4e:	08 95       	ret

00000d50 <_exit>:
 d50:	f8 94       	cli

00000d52 <__stop_program>:
 d52:	ff cf       	rjmp	.-2      	; 0xd52 <__stop_program>
